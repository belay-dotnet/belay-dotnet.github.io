name: Deploy VitePress site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Checkout main Belay.NET repository
        uses: actions/checkout@v4
        with:
          repository: belay-dotnet/Belay.NET
          path: belay-source
          fetch-depth: 1
          
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build .NET projects for XML documentation
        run: |
          cd belay-source
          echo "Building source projects only for XML documentation..."
          
          # Build each source project individually to avoid test dependencies
          cd src
          for project in Belay.Attributes Belay.Core Belay.Extensions Belay.Sync; do
            echo "Building $project..."
            cd $project
            dotnet restore --verbosity quiet
            dotnet build --configuration Release --verbosity quiet
            if [ $? -ne 0 ]; then
              echo "‚ùå $project build failed"
              exit 1
            fi
            echo "‚úÖ $project built successfully"
            cd ..
          done
        
      - name: Install DocFX
        run: |
          echo "Installing DocFX..."
          wget https://github.com/dotnet/docfx/releases/download/v2.78.3/docfx-linux-x64-v2.78.3.zip
          unzip -q docfx-linux-x64-v2.78.3.zip -d /tmp/docfx
          chmod +x /tmp/docfx/docfx
          echo "/tmp/docfx" >> $GITHUB_PATH
          
      - name: Generate API documentation with DocFX
        run: |
          echo "Generating API documentation with DocFX..."
          mkdir -p api/generated
          docfx metadata docfx.json
          docfx build docfx.json
          
          # Convert DocFX output to VitePress-compatible markdown
          echo "Converting DocFX output for VitePress..."
          
          # Create namespace-specific directories and clean README.md files
          # Create Belay.Attributes README
          mkdir -p "api/generated/Belay.Attributes"
          cat << 'EOF' > "api/generated/Belay.Attributes/README.md"
# Belay.Attributes API Documentation

Complete API documentation for the Belay.Attributes namespace.

## Overview

The Belay.Attributes namespace provides:

- **TaskAttribute** - Execute methods as tasks with caching and timeout
- **ThreadAttribute** - Background thread execution
- **SetupAttribute** - Device initialization methods  
- **TeardownAttribute** - Device cleanup methods
- **ThreadPriority** - Thread priority enumeration

## Generated Documentation

_Complete API reference generated by DocFX from XML documentation comments._
EOF

          # Create Belay.Core README
          mkdir -p "api/generated/Belay.Core"
          cat << 'EOF' > "api/generated/Belay.Core/README.md"
# Belay.Core API Documentation

Complete API documentation for the Belay.Core namespace.

## Overview

The Belay.Core namespace provides:

- **Device** - Main entry point for MicroPython device communication
- **Communication interfaces** - Serial and subprocess communication
- **Protocol implementations** - Raw REPL protocol handling
- **Execution framework** - Task, Setup, Thread, and Teardown executors
- **Session management** - Device session coordination
- **Exception handling** - Comprehensive error handling
- **Discovery services** - Automatic device discovery
- **Testing utilities** - MicroPython unix port integration

## Generated Documentation

_Complete API reference generated by DocFX from XML documentation comments._
EOF

          # Create Belay.Extensions README
          mkdir -p "api/generated/Belay.Extensions"
          cat << 'EOF' > "api/generated/Belay.Extensions/README.md"
# Belay.Extensions API Documentation

Complete API documentation for the Belay.Extensions namespace.

## Overview

The Belay.Extensions namespace provides:

- **ServiceCollectionExtensions** - Dependency injection setup
- **Configuration classes** - Comprehensive configuration options
- **Factory interfaces** - Device and executor factories
- **Health checks** - Device connectivity monitoring
- **Examples** - DI usage patterns and configuration samples

## Generated Documentation

_Complete API reference generated by DocFX from XML documentation comments._
EOF

          # Create Belay.Sync README
          mkdir -p "api/generated/Belay.Sync"
          cat << 'EOF' > "api/generated/Belay.Sync/README.md"
# Belay.Sync API Documentation

Complete API documentation for the Belay.Sync namespace.

## Overview

The Belay.Sync namespace provides:

- **DeviceFileSystem** - File system operations on MicroPython devices
- **DeviceExtensions** - Convenience methods for file synchronization
- **DeviceFileInfo** - File information and metadata
- **DevicePathUtil** - Path manipulation utilities
- **IDeviceFileSystem** - File system abstraction interface

## Generated Documentation

_Complete API reference generated by DocFX from XML documentation comments._
EOF
          
          echo "‚úÖ VitePress-compatible API documentation created"
          
      - name: Build with VitePress
        run: npm run build
        
      - name: Validate build output
        run: |
          echo "üîç Validating VitePress build output..."
          
          # Check if dist directory exists and has content
          if [ ! -d ".vitepress/dist" ]; then
            echo "‚ùå Build failed: .vitepress/dist directory not found"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f ".vitepress/dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found in dist directory"
            exit 1
          fi
          
          # Check critical navigation paths exist
          CRITICAL_PATHS=(
            ".vitepress/dist/guide/getting-started.html"
            ".vitepress/dist/examples/index.html" 
            ".vitepress/dist/api/index.html"
          )
          
          for path in "${CRITICAL_PATHS[@]}"; do
            if [ ! -f "$path" ]; then
              echo "‚ùå Critical path missing: $path"
              exit 1
            fi
          done
          
          # Check API documentation was generated
          if [ ! -d ".vitepress/dist/api/generated" ]; then
            echo "‚ùå API documentation not generated"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"
          
      - name: Check for broken internal links
        run: |
          echo "üîó Checking for broken internal links..."
          
          # Simple check for common broken link patterns in generated HTML
          cd .vitepress/dist
          
          # Look for 404 patterns in navigation
          if grep -r "404" --include="*.html" . | grep -q "nav\|menu"; then
            echo "‚ö†Ô∏è  Warning: Found potential navigation 404s"
            grep -r "404" --include="*.html" . | grep "nav\|menu" | head -5
          fi
          
          # Check that API links resolve
          if ! grep -q "api/generated" api/index.html; then
            echo "‚ö†Ô∏è  Warning: API index may not link to generated docs"
          fi
          
          echo "‚úÖ Link check completed"
          
      - name: Comprehensive deployment validation
        run: |
          echo "üîç Running comprehensive deployment validation..."
          python3 scripts/validate-deployment.py
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .vitepress/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4