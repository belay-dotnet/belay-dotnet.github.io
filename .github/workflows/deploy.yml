name: Deploy VitePress site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Checkout main Belay.NET repository
        uses: actions/checkout@v4
        with:
          repository: belay-dotnet/Belay.NET
          path: belay-source
          fetch-depth: 1
          
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build .NET projects for XML documentation
        run: |
          cd belay-source
          echo "Building .NET projects to generate XML documentation..."
          set +e  # Don't fail on build errors
          
          # Try full build first
          dotnet restore --verbosity quiet
          dotnet build --configuration Release --verbosity quiet
          BUILD_SUCCESS=$?
          
          if [ $BUILD_SUCCESS -ne 0 ]; then
            echo "‚ö†Ô∏è  Full build failed, attempting individual project builds..."
            
            # Try building individual source projects
            cd src
            for project in Belay.Attributes Belay.Core Belay.Sync; do
              echo "Building $project..."
              cd $project 2>/dev/null && dotnet build --configuration Release --verbosity quiet --no-restore || echo "‚ùå $project build failed"
              cd ..
            done
          else
            echo "‚úÖ Full build succeeded"
          fi
          
          set -e  # Re-enable fail on error
        
      - name: Generate API documentation
        run: |
          echo "Generating API documentation from XML files..."
          mkdir -p api/generated
          python3 scripts/generate-api-simple.py || echo "‚ö†Ô∏è  API generation failed, using fallback"
          
      - name: Build with VitePress
        run: npm run build
        
      - name: Validate build output
        run: |
          echo "üîç Validating VitePress build output..."
          
          # Check if dist directory exists and has content
          if [ ! -d ".vitepress/dist" ]; then
            echo "‚ùå Build failed: .vitepress/dist directory not found"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f ".vitepress/dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found in dist directory"
            exit 1
          fi
          
          # Check critical navigation paths exist
          CRITICAL_PATHS=(
            ".vitepress/dist/guide/getting-started.html"
            ".vitepress/dist/examples/index.html" 
            ".vitepress/dist/api/index.html"
          )
          
          for path in "${CRITICAL_PATHS[@]}"; do
            if [ ! -f "$path" ]; then
              echo "‚ùå Critical path missing: $path"
              exit 1
            fi
          done
          
          # Check API documentation was generated
          if [ ! -d ".vitepress/dist/api/generated" ]; then
            echo "‚ùå API documentation not generated"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"
          
      - name: Check for broken internal links
        run: |
          echo "üîó Checking for broken internal links..."
          
          # Simple check for common broken link patterns in generated HTML
          cd .vitepress/dist
          
          # Look for 404 patterns in navigation
          if grep -r "404" --include="*.html" . | grep -q "nav\|menu"; then
            echo "‚ö†Ô∏è  Warning: Found potential navigation 404s"
            grep -r "404" --include="*.html" . | grep "nav\|menu" | head -5
          fi
          
          # Check that API links resolve
          if ! grep -q "api/generated" api/index.html; then
            echo "‚ö†Ô∏è  Warning: API index may not link to generated docs"
          fi
          
          echo "‚úÖ Link check completed"
          
      - name: Comprehensive deployment validation
        run: |
          echo "üîç Running comprehensive deployment validation..."
          python3 scripts/validate-deployment.py
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .vitepress/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4