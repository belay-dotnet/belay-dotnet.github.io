name: Deploy VitePress site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Checkout main Belay.NET repository
        uses: actions/checkout@v4
        with:
          repository: belay-dotnet/Belay.NET
          path: belay-source
          fetch-depth: 1
          
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build .NET projects for XML documentation
        run: |
          cd belay-source
          echo "Building source projects only for XML documentation..."
          
          # Build each source project individually to avoid test dependencies
          cd src
          for project in Belay.Attributes Belay.Core Belay.Extensions Belay.Sync; do
            echo "Building $project..."
            cd $project
            dotnet restore --verbosity quiet
            dotnet build --configuration Release --verbosity quiet
            if [ $? -ne 0 ]; then
              echo "‚ùå $project build failed"
              exit 1
            fi
            echo "‚úÖ $project built successfully"
            cd ..
          done
        
      - name: Install DocFX and markitdown
        run: |
          echo "Installing DocFX..."
          wget https://github.com/dotnet/docfx/releases/download/v2.78.3/docfx-linux-x64-v2.78.3.zip
          unzip -q docfx-linux-x64-v2.78.3.zip -d /tmp/docfx
          chmod +x /tmp/docfx/docfx
          echo "/tmp/docfx" >> $GITHUB_PATH
          
          echo "Installing markitdown for HTML to Markdown conversion..."
          pip install markitdown
          
      - name: Generate API documentation with DocFX
        run: |
          echo "Generating API documentation with DocFX..."
          mkdir -p api/generated
          docfx metadata docfx.json
          docfx build docfx.json
          
          # Convert complete DocFX tree to VitePress-compatible markdown using markitdown
          echo "Converting complete DocFX tree for VitePress using markitdown..."
          
          # Create a conversion script for processing all HTML files
          cat << 'SCRIPT' > convert_docfx_tree.py
          #!/usr/bin/env python3
          import os
          import sys
          import subprocess
          import re
          from pathlib import Path
          
          def clean_markdown_content(content):
              """Clean up markitdown output for VitePress compatibility"""
              # Remove .html extensions from links
              content = re.sub(r'\.html\)', ')', content)
              
              # Fix malformed HTML elements by removing unclosed tags
              content = re.sub(r'<[^>]*$', '', content, flags=re.MULTILINE)  # Remove incomplete tags at end of lines
              content = re.sub(r'<(?!/)[^>]*>', '', content)  # Remove opening tags (keep closing tags)
              content = re.sub(r'</[^>]*>', '', content)  # Remove all closing tags
              
              # Clean up HTML entities and special characters  
              content = re.sub(r'&[a-zA-Z]+;', '', content)  # Remove HTML entities
              content = re.sub(r'\\\\\\\\', '', content)  # Remove escape characters
              
              # Remove JavaScript/TypeScript import statements that cause VitePress errors
              content = re.sub(r'^\\s*import\\s+.*from.*[\"\\'].*[\"\\'];?\\s*$', '', content, flags=re.MULTILINE)
              content = re.sub(r'^\\s*export\\s+.*$', '', content, flags=re.MULTILINE)
              
              # Remove all problematic markdown links that cause VitePress import errors
              content = re.sub(r'\[([^\]]*)\]\([^)]*\)', r'\1', content)  # Convert all links to plain text
              
              # Clean up multiple consecutive empty lines
              content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
              
              return content
          
          def convert_html_file(html_path, output_dir):
              """Convert a single HTML file to markdown"""
              try:
                  # Use markitdown to convert
                  result = subprocess.run(['python3', '-m', 'markitdown', html_path], 
                                        capture_output=True, text=True)
                  if result.returncode != 0:
                      print(f"‚ö†Ô∏è Failed to convert {html_path}: {result.stderr}")
                      return False
                  
                  # Clean the content
                  content = clean_markdown_content(result.stdout)
                  
                  # Extract filename and create output path
                  html_name = Path(html_path).stem
                  if html_name.endswith('.html'):
                      html_name = html_name[:-5]
                  
                  # Create directory structure
                  output_path = output_dir / f"{html_name}.md"
                  output_path.parent.mkdir(parents=True, exist_ok=True)
                  
                  # Write the markdown
                  with open(output_path, 'w', encoding='utf-8') as f:
                      f.write(content)
                  
                  return True
              except Exception as e:
                  print(f"‚ö†Ô∏è Error converting {html_path}: {e}")
                  return False
          
          def main():
              metadata_dir = Path("api/generated/api/metadata")
              output_dir = Path("api/generated")
              
              if not metadata_dir.exists():
                  print("‚ùå DocFX metadata directory not found")
                  return 1
              
              # Process all HTML files
              html_files = list(metadata_dir.glob("*.html"))
              converted = 0
              
              for html_file in html_files:
                  if html_file.name not in ['toc.html']:  # Skip table of contents
                      if convert_html_file(html_file, output_dir):
                          converted += 1
              
              print(f"‚úÖ Converted {converted}/{len(html_files)} API documentation files")
              return 0
          
          if __name__ == "__main__":
              sys.exit(main())
          SCRIPT
          
          # Make the script executable and run it
          chmod +x convert_docfx_tree.py
          python3 convert_docfx_tree.py
          
          echo "‚úÖ VitePress-compatible API documentation created"
          
      - name: Build with VitePress
        run: npm run build
        
      - name: Validate build output
        run: |
          echo "üîç Validating VitePress build output..."
          
          # Check if dist directory exists and has content
          if [ ! -d ".vitepress/dist" ]; then
            echo "‚ùå Build failed: .vitepress/dist directory not found"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f ".vitepress/dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found in dist directory"
            exit 1
          fi
          
          # Check critical navigation paths exist
          CRITICAL_PATHS=(
            ".vitepress/dist/guide/getting-started.html"
            ".vitepress/dist/examples/index.html" 
            ".vitepress/dist/api/index.html"
          )
          
          for path in "${CRITICAL_PATHS[@]}"; do
            if [ ! -f "$path" ]; then
              echo "‚ùå Critical path missing: $path"
              exit 1
            fi
          done
          
          # Check API documentation was generated
          if [ ! -d ".vitepress/dist/api/generated" ]; then
            echo "‚ùå API documentation not generated"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"
          
      - name: Check for broken internal links
        run: |
          echo "üîó Checking for broken internal links..."
          
          # Simple check for common broken link patterns in generated HTML
          cd .vitepress/dist
          
          # Look for 404 patterns in navigation
          if grep -r "404" --include="*.html" . | grep -q "nav\|menu"; then
            echo "‚ö†Ô∏è  Warning: Found potential navigation 404s"
            grep -r "404" --include="*.html" . | grep "nav\|menu" | head -5
          fi
          
          # Check that API links resolve
          if ! grep -q "api/generated" api/index.html; then
            echo "‚ö†Ô∏è  Warning: API index may not link to generated docs"
          fi
          
          echo "‚úÖ Link check completed"
          
      - name: Comprehensive deployment validation
        run: |
          echo "üîç Running comprehensive deployment validation..."
          python3 scripts/validate-deployment.py
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .vitepress/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4