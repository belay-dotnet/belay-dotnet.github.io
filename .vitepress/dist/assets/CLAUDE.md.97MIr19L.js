import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"CLAUDE.md - Documentation Website Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"CLAUDE.md","filePath":"CLAUDE.md"}'),t={name:"CLAUDE.md"};function l(o,s,r,p,d,h){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="claude-md-documentation-website-development-guide" tabindex="-1">CLAUDE.md - Documentation Website Development Guide <a class="header-anchor" href="#claude-md-documentation-website-development-guide" aria-label="Permalink to &quot;CLAUDE.md - Documentation Website Development Guide&quot;">​</a></h1><p>This file provides specific guidance for working on the belay-dotnet.github.io documentation website.</p><h2 id="local-build-testing" tabindex="-1">Local Build Testing <a class="header-anchor" href="#local-build-testing" aria-label="Permalink to &quot;Local Build Testing&quot;">​</a></h2><p><strong>CRITICAL</strong>: Always test changes locally before pushing to CI to avoid breaking the deployed website.</p><h3 id="quick-local-build-test" tabindex="-1">Quick Local Build Test <a class="header-anchor" href="#quick-local-build-test" aria-label="Permalink to &quot;Quick Local Build Test&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/local-build.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This script:</p><ol><li>Checks for required tools (DocFX, markitdown, Node.js)</li><li>Installs missing dependencies</li><li>Clones/updates the Belay.NET source repository</li><li>Builds .NET projects for XML documentation</li><li>Generates DocFX API documentation</li><li>Converts HTML to VitePress-compatible markdown</li><li>Tests the VitePress build</li></ol><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>The local build script will install most dependencies, but you may need:</p><ul><li><strong>Node.js 18+</strong>: For VitePress</li><li><strong>.NET 8 SDK</strong>: For building source projects</li><li><strong>DocFX</strong>: Downloaded automatically by the script</li></ul><h3 id="manual-setup-if-needed" tabindex="-1">Manual Setup (if needed) <a class="header-anchor" href="#manual-setup-if-needed" aria-label="Permalink to &quot;Manual Setup (if needed)&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install DocFX</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/dotnet/docfx/releases/download/v2.78.3/docfx-linux-x64-v2.78.3.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docfx-linux-x64-v2.78.3.zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/docfx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/docfx/docfx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/tmp/docfx:$PATH</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Node.js dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="api-documentation-pipeline" tabindex="-1">API Documentation Pipeline <a class="header-anchor" href="#api-documentation-pipeline" aria-label="Permalink to &quot;API Documentation Pipeline&quot;">​</a></h2><p>The documentation website includes auto-generated API documentation through this pipeline:</p><ol><li><strong>Source Build</strong>: Build Belay.NET projects to generate XML documentation</li><li><strong>DocFX Native Markdown</strong>: Generate markdown directly from XML comments using DocFX <code>--outputFormat markdown</code></li><li><strong>VitePress Build</strong>: Generate the final static website</li></ol><h3 id="key-files" tabindex="-1">Key Files <a class="header-anchor" href="#key-files" aria-label="Permalink to &quot;Key Files&quot;">​</a></h3><ul><li><code>docfx.json</code>: DocFX configuration for API documentation generation</li><li><code>.github/workflows/deploy.yml</code>: CI/CD pipeline that builds and deploys the website</li></ul><h3 id="common-issues" tabindex="-1">Common Issues <a class="header-anchor" href="#common-issues" aria-label="Permalink to &quot;Common Issues&quot;">​</a></h3><h4 id="missing-api-documentation" tabindex="-1">Missing API Documentation <a class="header-anchor" href="#missing-api-documentation" aria-label="Permalink to &quot;Missing API Documentation&quot;">​</a></h4><p><strong>Symptom</strong>: API pages show minimal content <strong>Cause</strong>: DocFX configuration issues with native markdown output <strong>Fix</strong>: Ensure <code>outputFormat: &quot;markdown&quot;</code>, <code>memberLayout: &quot;separatePages&quot;</code> in <code>docfx.json</code></p><h4 id="build-artifacts-in-git" tabindex="-1">Build Artifacts in Git <a class="header-anchor" href="#build-artifacts-in-git" aria-label="Permalink to &quot;Build Artifacts in Git&quot;">​</a></h4><p><strong>Symptom</strong>: Large commits with generated files <strong>Fix</strong>: The <code>.vitepress/dist/</code> directory should not be committed - it contains build artifacts</p><h3 id="testing-changes" tabindex="-1">Testing Changes <a class="header-anchor" href="#testing-changes" aria-label="Permalink to &quot;Testing Changes&quot;">​</a></h3><ol><li><strong>Always run local build first</strong>: <code>./scripts/local-build.sh</code></li><li><strong>Check the generated markdown</strong>: Look for HTML parsing issues in <code>api/generated/</code></li><li><strong>Verify VitePress can parse files</strong>: Local build will fail if markdown is malformed</li><li><strong>Test navigation</strong>: Ensure API documentation is accessible through the website</li></ol><h3 id="development-workflow" tabindex="-1">Development Workflow <a class="header-anchor" href="#development-workflow" aria-label="Permalink to &quot;Development Workflow&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. Make changes to DocFX configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docfx.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. Test locally BEFORE committing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/local-build.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. If build succeeds, commit and push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Update API documentation generation&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. Monitor CI for successful deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>This approach prevents broken deployments and ensures the website remains functional.</p>`,28)]))}const k=i(t,[["render",l]]);export{u as __pageData,k as default};
