import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.CUqMdM43.js";const k=JSON.parse('{"title":"ICD-001: Raw REPL Protocol Specification","description":"","frontmatter":{},"headers":[],"relativePath":"ICDs/ICD-001-RawReplProtocol.md","filePath":"ICDs/ICD-001-RawReplProtocol.md"}'),t={name:"ICDs/ICD-001-RawReplProtocol.md"};function l(r,s,p,o,h,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="icd-001-raw-repl-protocol-specification" tabindex="-1">ICD-001: Raw REPL Protocol Specification <a class="header-anchor" href="#icd-001-raw-repl-protocol-specification" aria-label="Permalink to &quot;ICD-001: Raw REPL Protocol Specification&quot;">​</a></h1><p><strong>Version</strong>: 2.0<br><strong>Date</strong>: 2025-01-13<br><strong>Status</strong>: Active<br><strong>Updated</strong>: 2025-08-14 - Added sophisticated protocol features</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This document specifies the Raw REPL (Read-Eval-Print Loop) protocol for MicroPython device communication. This protocol replaces the complex abstraction layers with a simple, well-documented interface.</p><h2 id="protocol-states" tabindex="-1">Protocol States <a class="header-anchor" href="#protocol-states" aria-label="Permalink to &quot;Protocol States&quot;">​</a></h2><h3 id="normal-mode" tabindex="-1">NORMAL Mode <a class="header-anchor" href="#normal-mode" aria-label="Permalink to &quot;NORMAL Mode&quot;">​</a></h3><ul><li>Default interactive REPL state</li><li>Commands terminated by newline</li><li>Exit with Ctrl-D (0x04)</li></ul><h3 id="raw-mode" tabindex="-1">RAW Mode <a class="header-anchor" href="#raw-mode" aria-label="Permalink to &quot;RAW Mode&quot;">​</a></h3><ul><li>Programmatic execution mode</li><li>Entered via Ctrl-A (0x01)</li><li>Commands terminated by Ctrl-D (0x04)</li><li>Exits to NORMAL on Ctrl-B (0x02)</li></ul><h3 id="raw-paste-mode" tabindex="-1">RAW-PASTE Mode <a class="header-anchor" href="#raw-paste-mode" aria-label="Permalink to &quot;RAW-PASTE Mode&quot;">​</a></h3><ul><li>Enhanced RAW mode with flow control</li><li>Handles large code transfers efficiently</li><li>Uses window-based flow control</li></ul><h2 id="control-characters" tabindex="-1">Control Characters <a class="header-anchor" href="#control-characters" aria-label="Permalink to &quot;Control Characters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Byte</th><th>Name</th><th>Function</th></tr></thead><tbody><tr><td>0x01</td><td>ENTER_RAW</td><td>Enter raw mode</td></tr><tr><td>0x02</td><td>EXIT_RAW</td><td>Exit raw mode to normal</td></tr><tr><td>0x03</td><td>INTERRUPT</td><td>Interrupt execution (Ctrl-C)</td></tr><tr><td>0x04</td><td>EXECUTE</td><td>Execute code / soft reset</td></tr><tr><td>0x05</td><td>RAW_PASTE</td><td>Enter raw-paste mode</td></tr></tbody></table><h2 id="protocol-sequences" tabindex="-1">Protocol Sequences <a class="header-anchor" href="#protocol-sequences" aria-label="Permalink to &quot;Protocol Sequences&quot;">​</a></h2><h3 id="basic-code-execution" tabindex="-1">Basic Code Execution <a class="header-anchor" href="#basic-code-execution" aria-label="Permalink to &quot;Basic Code Execution&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. Send: 0x01 (ENTER_RAW)</span></span>
<span class="line"><span>2. Wait for: &quot;raw REPL; CTRL-B to exit\\r\\n&gt;&quot;</span></span>
<span class="line"><span>3. Send: python_code</span></span>
<span class="line"><span>4. Send: 0x04 (EXECUTE)</span></span>
<span class="line"><span>5. Read: execution_result</span></span>
<span class="line"><span>6. Send: 0x02 (EXIT_RAW)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="sophisticated-raw-paste-mode-adaptiverawreplprotocol" tabindex="-1">Sophisticated Raw-Paste Mode (AdaptiveRawReplProtocol) <a class="header-anchor" href="#sophisticated-raw-paste-mode-adaptiverawreplprotocol" aria-label="Permalink to &quot;Sophisticated Raw-Paste Mode (AdaptiveRawReplProtocol)&quot;">​</a></h3><p>For large code transfers and enhanced performance, Belay.NET implements Raw-Paste mode:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. Send: 0x05, &#39;A&#39;, 0x01 (RAW_PASTE initialization)</span></span>
<span class="line"><span>2. Wait for: Window size response</span></span>
<span class="line"><span>3. Send: Code in chunks based on window size  </span></span>
<span class="line"><span>4. Handle: Flow control bytes (0x01 for continue)</span></span>
<span class="line"><span>5. Send: 0x04 (End of data)</span></span>
<span class="line"><span>6. Read: Execution results with flow control</span></span>
<span class="line"><span>7. Send: 0x02 (EXIT_RAW)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="flow-control-protocol" tabindex="-1">Flow Control Protocol <a class="header-anchor" href="#flow-control-protocol" aria-label="Permalink to &quot;Flow Control Protocol&quot;">​</a></h4><ul><li><strong>Window Size Negotiation</strong>: Device advertises maximum buffer size</li><li><strong>Acknowledgment Protocol</strong>: Device sends 0x01 when ready for more data</li><li><strong>Dynamic Chunking</strong>: Code automatically split based on device capabilities</li><li><strong>Adaptive Fallback</strong>: Automatic switch to basic Raw REPL if paste mode fails</li></ul><h4 id="device-capability-detection" tabindex="-1">Device Capability Detection <a class="header-anchor" href="#device-capability-detection" aria-label="Permalink to &quot;Device Capability Detection&quot;">​</a></h4><p>The adaptive protocol automatically detects:</p><ul><li>Raw-Paste mode support</li><li>Optimal window sizes (typically 32-512 bytes)</li><li>Device-specific timing requirements</li><li>Flow control reliability</li></ul><h2 id="response-patterns" tabindex="-1">Response Patterns <a class="header-anchor" href="#response-patterns" aria-label="Permalink to &quot;Response Patterns&quot;">​</a></h2><h3 id="success-response" tabindex="-1">Success Response <a class="header-anchor" href="#success-response" aria-label="Permalink to &quot;Success Response&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>OK\\x04\\x04&gt;</span></span>
<span class="line"><span>[output_data]</span></span>
<span class="line"><span>\\x04&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="error-response" tabindex="-1">Error Response <a class="header-anchor" href="#error-response" aria-label="Permalink to &quot;Error Response&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>OK\\x04\\x04&gt;</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;&lt;stdin&gt;&quot;, line X, in &lt;module&gt;</span></span>
<span class="line"><span>[error_details]</span></span>
<span class="line"><span>\\x04&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="flow-control" tabindex="-1">Flow Control <a class="header-anchor" href="#flow-control" aria-label="Permalink to &quot;Flow Control&quot;">​</a></h2><ul><li>Device sends 0x01 when ready for more data</li><li>Client must wait for flow control before sending next chunk</li><li>Window size determines maximum unacknowledged bytes</li></ul><h2 id="implementation-notes" tabindex="-1">Implementation Notes <a class="header-anchor" href="#implementation-notes" aria-label="Permalink to &quot;Implementation Notes&quot;">​</a></h2><ul><li>All operations are sequential (MicroPython is single-threaded)</li><li>No concurrent execution support</li><li>Device state resets on disconnect/error</li><li>Timeout handling is client responsibility</li></ul><h2 id="error-conditions" tabindex="-1">Error Conditions <a class="header-anchor" href="#error-conditions" aria-label="Permalink to &quot;Error Conditions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Condition</th><th>Behavior</th><th>Recovery</th></tr></thead><tbody><tr><td>Parse Error</td><td>Returns traceback</td><td>Continue</td></tr><tr><td>Runtime Error</td><td>Returns traceback</td><td>Continue</td></tr><tr><td>Memory Error</td><td>Soft reset</td><td>Reconnect</td></tr><tr><td>Hardware Error</td><td>Device reset</td><td>Reconnect</td></tr></tbody></table><h2 id="simple-c-implementation" tabindex="-1">Simple C# Implementation <a class="header-anchor" href="#simple-c-implementation" aria-label="Permalink to &quot;Simple C# Implementation&quot;">​</a></h2><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RawReplProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENTER_RAW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXIT_RAW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INTERRUPT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXECUTE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x04</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RAW_PASTE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Enter raw mode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([ENTER_RAW]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WaitForPrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Send code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Encoding.UTF8.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pythonCode));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Execute</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([EXECUTE]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Read result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadUntilPrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Exit raw mode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([EXIT_RAW]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>This protocol specification replaces all executor abstractions, proxy patterns, and communication interfaces with a simple, documented approach that directly reflects MicroPython&#39;s actual behavior.</p>`,38)]))}const b=a(t,[["render",l]]);export{k as __pageData,b as default};
