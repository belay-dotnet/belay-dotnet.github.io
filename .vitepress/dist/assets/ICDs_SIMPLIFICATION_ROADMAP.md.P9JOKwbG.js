import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.CUqMdM43.js";const d=JSON.parse('{"title":"Belay.NET Aggressive Simplification Roadmap","description":"","frontmatter":{},"headers":[],"relativePath":"ICDs/SIMPLIFICATION_ROADMAP.md","filePath":"ICDs/SIMPLIFICATION_ROADMAP.md"}'),t={name:"ICDs/SIMPLIFICATION_ROADMAP.md"};function l(r,i,o,h,p,c){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="belay-net-aggressive-simplification-roadmap" tabindex="-1">Belay.NET Aggressive Simplification Roadmap <a class="header-anchor" href="#belay-net-aggressive-simplification-roadmap" aria-label="Permalink to &quot;Belay.NET Aggressive Simplification Roadmap&quot;">​</a></h1><p><strong>Status</strong>: Active<br><strong>Approach</strong>: Aggressive simplification with minimal backward compatibility<br><strong>Goal</strong>: Reduce ~8000 lines to ~2000 lines while improving functionality</p><h2 id="phase-1-remove-complex-abstractions-current" tabindex="-1">Phase 1: Remove Complex Abstractions (Current) <a class="header-anchor" href="#phase-1-remove-complex-abstractions-current" aria-label="Permalink to &quot;Phase 1: Remove Complex Abstractions (Current)&quot;">​</a></h2><h3 id="_1-1-eliminate-executor-hierarchy-✓-next" tabindex="-1">1.1 Eliminate Executor Hierarchy ✓ NEXT <a class="header-anchor" href="#_1-1-eliminate-executor-hierarchy-✓-next" aria-label="Permalink to &quot;1.1 Eliminate Executor Hierarchy ✓ NEXT&quot;">​</a></h3><ul><li>[ ] Remove <code>SimplifiedBaseExecutor</code> and all subclasses</li><li>[ ] Remove <code>EnhancedExecutor</code></li><li>[ ] Replace with simple <code>AttributeHandler</code> static class</li><li>[ ] Fix circular dependency infinite recursion</li></ul><p><strong>Impact</strong>: -2000 lines, fixes critical bugs</p><h3 id="_1-2-remove-proxy-pattern-✓-next" tabindex="-1">1.2 Remove Proxy Pattern ✓ NEXT <a class="header-anchor" href="#_1-2-remove-proxy-pattern-✓-next" aria-label="Permalink to &quot;1.2 Remove Proxy Pattern ✓ NEXT&quot;">​</a></h3><ul><li>[ ] Remove <code>DeviceProxy&lt;T&gt;</code> dynamic proxy generation</li><li>[ ] Replace with direct interface implementations or simple wrappers</li><li>[ ] Eliminate reflection-based method interception</li></ul><p><strong>Impact</strong>: -500 lines, 10x better debuggability</p><h3 id="_1-3-simplify-exception-handling-✓-next" tabindex="-1">1.3 Simplify Exception Handling ✓ NEXT <a class="header-anchor" href="#_1-3-simplify-exception-handling-✓-next" aria-label="Permalink to &quot;1.3 Simplify Exception Handling ✓ NEXT&quot;">​</a></h3><ul><li>[ ] Replace exception hierarchy with single <code>DeviceException</code></li><li>[ ] Remove <code>IErrorMapper</code>, <code>IExceptionEnricher</code></li><li>[ ] Remove <code>GlobalExceptionHandler</code> complexity</li></ul><p><strong>Impact</strong>: -300 lines, clearer error handling</p><h2 id="phase-2-replace-abstractions-with-icds" tabindex="-1">Phase 2: Replace Abstractions with ICDs <a class="header-anchor" href="#phase-2-replace-abstractions-with-icds" aria-label="Permalink to &quot;Phase 2: Replace Abstractions with ICDs&quot;">​</a></h2><h3 id="_2-1-implement-new-core-interface-✓-in-progress" tabindex="-1">2.1 Implement New Core Interface ✓ IN PROGRESS <a class="header-anchor" href="#_2-1-implement-new-core-interface-✓-in-progress" aria-label="Permalink to &quot;2.1 Implement New Core Interface ✓ IN PROGRESS&quot;">​</a></h3><ul><li>[x] Create <code>IDeviceConnection</code> contract (ICD-002)</li><li>[x] Document Raw REPL protocol (ICD-001)</li><li>[ ] Implement <code>SerialDeviceConnection</code></li><li>[ ] Implement <code>SubprocessDeviceConnection</code></li></ul><h3 id="_2-2-remove-infrastructure-complexity" tabindex="-1">2.2 Remove Infrastructure Complexity <a class="header-anchor" href="#_2-2-remove-infrastructure-complexity" aria-label="Permalink to &quot;2.2 Remove Infrastructure Complexity&quot;">​</a></h3><ul><li>[ ] Remove <code>ITransactionManager</code> and transaction abstractions</li><li>[ ] Remove complex caching infrastructure (<code>IMethodDeploymentCache</code>, etc.)</li><li>[ ] Replace with simple <code>Dictionary</code>-based memoization</li><li>[ ] Remove <code>IPersistentCacheStorage</code> abstractions</li></ul><p><strong>Impact</strong>: -600 lines</p><h3 id="_2-3-simplify-configuration" tabindex="-1">2.3 Simplify Configuration <a class="header-anchor" href="#_2-3-simplify-configuration" aria-label="Permalink to &quot;2.3 Simplify Configuration&quot;">​</a></h3><ul><li>[ ] Replace configuration classes with simple records</li><li>[ ] Remove dependency injection complexity</li><li>[ ] Use direct instantiation with clear constructors</li></ul><p><strong>Impact</strong>: -200 lines</p><h2 id="phase-3-new-simplified-api-design" tabindex="-1">Phase 3: New Simplified API Design <a class="header-anchor" href="#phase-3-new-simplified-api-design" aria-label="Permalink to &quot;Phase 3: New Simplified API Design&quot;">​</a></h2><h3 id="_3-1-core-device-class" tabindex="-1">3.1 Core Device Class <a class="header-anchor" href="#_3-1-core-device-class" aria-label="Permalink to &quot;3.1 Core Device Class&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDeviceConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDisposable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IDeviceConnection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleCache</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Direct, simple API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecutePython</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecutePython</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(code, cancellationToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Attribute handling without complex executors</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pythonCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GeneratePythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> policies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetPolicies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteWithPolicies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(pythonCode, policies);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3-2-simple-factory-pattern" tabindex="-1">3.2 Simple Factory Pattern <a class="header-anchor" href="#_3-2-simple-factory-pattern" aria-label="Permalink to &quot;3.2 Simple Factory Pattern&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeviceFactory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateSerial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> portName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baudRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 115200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SerialDeviceConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(portName, baudRate);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateSubprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> micropythonPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;micropython&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubprocessDeviceConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(micropythonPath);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connection);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="phase-4-testing-and-migration" tabindex="-1">Phase 4: Testing and Migration <a class="header-anchor" href="#phase-4-testing-and-migration" aria-label="Permalink to &quot;Phase 4: Testing and Migration&quot;">​</a></h2><h3 id="_4-1-update-tests" tabindex="-1">4.1 Update Tests <a class="header-anchor" href="#_4-1-update-tests" aria-label="Permalink to &quot;4.1 Update Tests&quot;">​</a></h3><ul><li>[ ] Simplify test infrastructure</li><li>[ ] Remove mocking complexity where unnecessary</li><li>[ ] Focus on behavior testing over implementation testing</li></ul><h3 id="_4-2-update-documentation" tabindex="-1">4.2 Update Documentation <a class="header-anchor" href="#_4-2-update-documentation" aria-label="Permalink to &quot;4.2 Update Documentation&quot;">​</a></h3><ul><li>[ ] Update API documentation for simplified interfaces</li><li>[ ] Create migration guide for existing users</li><li>[ ] Document protocol specifications</li></ul><h3 id="_4-3-performance-validation" tabindex="-1">4.3 Performance Validation <a class="header-anchor" href="#_4-3-performance-validation" aria-label="Permalink to &quot;4.3 Performance Validation&quot;">​</a></h3><ul><li>[ ] Benchmark simplified vs complex implementation</li><li>[ ] Validate memory usage improvements</li><li>[ ] Confirm startup time improvements</li></ul><h2 id="files-to-remove-completely" tabindex="-1">Files to Remove Completely <a class="header-anchor" href="#files-to-remove-completely" aria-label="Permalink to &quot;Files to Remove Completely&quot;">​</a></h2><h3 id="executor-hierarchy-7-files-2000-lines" tabindex="-1">Executor Hierarchy (7 files, ~2000 lines) <a class="header-anchor" href="#executor-hierarchy-7-files-2000-lines" aria-label="Permalink to &quot;Executor Hierarchy (7 files, ~2000 lines)&quot;">​</a></h3><ul><li><code>src/Belay.Core/Execution/SimplifiedBaseExecutor.cs</code></li><li><code>src/Belay.Core/Execution/SimplifiedTaskExecutor.cs</code></li><li><code>src/Belay.Core/Execution/SimplifiedThreadExecutor.cs</code></li><li><code>src/Belay.Core/Execution/SimplifiedSetupExecutor.cs</code></li><li><code>src/Belay.Core/Execution/SimplifiedTeardownExecutor.cs</code></li><li><code>src/Belay.Core/Execution/EnhancedExecutor.cs</code></li><li><code>src/Belay.Core/Execution/DeviceProxy.cs</code></li></ul><h3 id="caching-infrastructure-4-files-600-lines" tabindex="-1">Caching Infrastructure (4 files, ~600 lines) <a class="header-anchor" href="#caching-infrastructure-4-files-600-lines" aria-label="Permalink to &quot;Caching Infrastructure (4 files, ~600 lines)&quot;">​</a></h3><ul><li><code>src/Belay.Core/Caching/IMethodDeploymentCache.cs</code></li><li><code>src/Belay.Core/Caching/MethodDeploymentCache.cs</code></li><li><code>src/Belay.Core/Caching/MethodCacheKey.cs</code></li><li><code>src/Belay.Core/Caching/MethodCacheEntry.cs</code></li><li><code>src/Belay.Core/Caching/MethodCacheConfiguration.cs</code></li><li><code>src/Belay.Core/Caching/CacheStatistics.cs</code></li></ul><h3 id="transaction-management-2-files-200-lines" tabindex="-1">Transaction Management (2 files, ~200 lines) <a class="header-anchor" href="#transaction-management-2-files-200-lines" aria-label="Permalink to &quot;Transaction Management (2 files, ~200 lines)&quot;">​</a></h3><ul><li><code>src/Belay.Core/Transactions/ITransactionManager.cs</code></li><li><code>src/Belay.Core/Transactions/IDeviceTransaction.cs</code></li></ul><h3 id="exception-infrastructure-3-files-300-lines" tabindex="-1">Exception Infrastructure (3 files, ~300 lines) <a class="header-anchor" href="#exception-infrastructure-3-files-300-lines" aria-label="Permalink to &quot;Exception Infrastructure (3 files, ~300 lines)&quot;">​</a></h3><ul><li><code>src/Belay.Core/Exceptions/ErrorMapper.cs</code></li><li><code>src/Belay.Core/Exceptions/GlobalExceptionHandler.cs</code></li><li>Complex exception hierarchy</li></ul><h3 id="context-and-di-complexity-3-files-400-lines" tabindex="-1">Context and DI Complexity (3 files, ~400 lines) <a class="header-anchor" href="#context-and-di-complexity-3-files-400-lines" aria-label="Permalink to &quot;Context and DI Complexity (3 files, ~400 lines)&quot;">​</a></h3><ul><li><code>src/Belay.Core/Execution/IExecutionContextService.cs</code></li><li><code>src/Belay.Core/Execution/IMethodExecutionContext.cs</code></li><li>Complex DI registration</li></ul><h2 id="expected-results" tabindex="-1">Expected Results <a class="header-anchor" href="#expected-results" aria-label="Permalink to &quot;Expected Results&quot;">​</a></h2><h3 id="quantitative-improvements" tabindex="-1">Quantitative Improvements <a class="header-anchor" href="#quantitative-improvements" aria-label="Permalink to &quot;Quantitative Improvements&quot;">​</a></h3><ul><li><strong>Code Reduction</strong>: 40% (3500+ lines removed)</li><li><strong>Assembly Count</strong>: Reduce from 8 to 3-4 assemblies</li><li><strong>Build Time</strong>: 30% faster</li><li><strong>Runtime Performance</strong>: 15-20% improvement</li><li><strong>Memory Usage</strong>: 25% reduction</li><li><strong>Startup Time</strong>: 50% faster</li></ul><h3 id="qualitative-improvements" tabindex="-1">Qualitative Improvements <a class="header-anchor" href="#qualitative-improvements" aria-label="Permalink to &quot;Qualitative Improvements&quot;">​</a></h3><ul><li><strong>Debuggability</strong>: Direct call stacks, no proxy magic</li><li><strong>Maintainability</strong>: Clear, simple code paths</li><li><strong>Testing</strong>: Fewer mocks, more behavior testing</li><li><strong>Onboarding</strong>: New developers productive in hours</li><li><strong>Documentation</strong>: Clear protocols instead of abstract interfaces</li></ul><h2 id="risk-mitigation" tabindex="-1">Risk Mitigation <a class="header-anchor" href="#risk-mitigation" aria-label="Permalink to &quot;Risk Mitigation&quot;">​</a></h2><h3 id="breaking-changes-acceptable" tabindex="-1">Breaking Changes (Acceptable) <a class="header-anchor" href="#breaking-changes-acceptable" aria-label="Permalink to &quot;Breaking Changes (Acceptable)&quot;">​</a></h3><ul><li>Old executor-based APIs will break</li><li>Proxy-based device creation will break</li><li>Complex configuration APIs will break</li></ul><h3 id="migration-path" tabindex="-1">Migration Path <a class="header-anchor" href="#migration-path" aria-label="Permalink to &quot;Migration Path&quot;">​</a></h3><ul><li>Provide clear examples of new simple API</li><li>Document protocol specifications</li><li>Create simple factory methods</li><li>Maintain core functionality</li></ul><h3 id="validation-strategy" tabindex="-1">Validation Strategy <a class="header-anchor" href="#validation-strategy" aria-label="Permalink to &quot;Validation Strategy&quot;">​</a></h3><ul><li>Extensive integration testing</li><li>Performance benchmarking</li><li>Memory usage validation</li><li>Protocol compliance testing</li></ul><h2 id="success-criteria" tabindex="-1">Success Criteria <a class="header-anchor" href="#success-criteria" aria-label="Permalink to &quot;Success Criteria&quot;">​</a></h2><ol><li><strong>Compilation</strong>: All code compiles without executor circular dependencies</li><li><strong>Functionality</strong>: All core device operations work with new simple API</li><li><strong>Performance</strong>: 15%+ improvement in execution speed</li><li><strong>Maintainability</strong>: New developers can understand codebase in 2 hours</li><li><strong>Debugging</strong>: Clear stack traces without proxy layers</li><li><strong>Testing</strong>: 195+ tests pass with simplified implementation</li></ol><p>This aggressive simplification will transform Belay.NET from an over-engineered enterprise library into a clean, fast, maintainable tool for MicroPython device communication.</p>`,59)]))}const g=s(t,[["render",l]]);export{d as __pageData,g as default};
