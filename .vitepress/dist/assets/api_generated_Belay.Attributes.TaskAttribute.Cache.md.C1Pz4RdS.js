import{_ as a,c as t,o as r,ag as s}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"Property Cache","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Attributes.TaskAttribute.Cache.md","filePath":"api/generated/Belay.Attributes.TaskAttribute.Cache.md"}'),i={name:"api/generated/Belay.Attributes.TaskAttribute.Cache.md"};function o(n,e,l,c,h,d){return r(),t("div",null,e[0]||(e[0]=[s(`<h1 id="property-cache" tabindex="-1"><a id="Belay_Attributes_TaskAttribute_Cache"></a> Property Cache <a class="header-anchor" href="#property-cache" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Attributes_TaskAttribute_Cache&quot;&gt;&lt;/a&gt; Property Cache&quot;">​</a></h1><p>Namespace: <a href="./Belay.Attributes.html">Belay.Attributes</a><br> Assembly: Belay.Attributes.dll</p><h2 id="cache" tabindex="-1"><a id="Belay_Attributes_TaskAttribute_Cache"></a> Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Attributes_TaskAttribute_Cache&quot;&gt;&lt;/a&gt; Cache&quot;">​</a></h2><p>Gets or sets a value indicating whether gets or sets whether the method should be cached on the device. When true, the method code is deployed once and reused for subsequent calls. When false, the code is sent for each invocation.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cache { get; set; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="property-value" tabindex="-1">Property Value <a class="header-anchor" href="#property-value" aria-label="Permalink to &quot;Property Value&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><pre><code class="lang-csharp">[Task(Cache = false)]
public async Task&lt;string&gt; GetDiagnosticInfoAsync()
{
    // This method&#39;s code is sent fresh each time
    // Useful for debugging or infrequent operations
    return await ExecuteAsync&lt;string&gt;(@&quot;
        import gc, sys
        f&#39;Memory: {gc.mem_free()}, Platform: {sys.platform}&#39;
    &quot;);
}</code></pre><h3 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h3><p> Caching improves performance by avoiding repeated code deployment, but may consume device memory. Disable caching for methods that are called infrequently or when device memory is constrained. </p><p> Cached methods are automatically invalidated and redeployed if the method implementation changes between application runs. </p>`,12)]))}const m=a(i,[["render",o]]);export{u as __pageData,m as default};
