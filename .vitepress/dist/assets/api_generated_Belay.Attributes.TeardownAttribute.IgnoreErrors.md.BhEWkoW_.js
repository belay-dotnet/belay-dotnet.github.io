import{_ as r,c as t,o as a,ag as o}from"./chunks/framework.CUqMdM43.js";const h=JSON.parse('{"title":"Property IgnoreErrors","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Attributes.TeardownAttribute.IgnoreErrors.md","filePath":"api/generated/Belay.Attributes.TeardownAttribute.IgnoreErrors.md"}'),s={name:"api/generated/Belay.Attributes.TeardownAttribute.IgnoreErrors.md"};function n(i,e,l,p,d,c){return a(),t("div",null,e[0]||(e[0]=[o(`<h1 id="property-ignoreerrors" tabindex="-1"><a id="Belay_Attributes_TeardownAttribute_IgnoreErrors"></a> Property IgnoreErrors <a class="header-anchor" href="#property-ignoreerrors" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Attributes_TeardownAttribute_IgnoreErrors&quot;&gt;&lt;/a&gt; Property IgnoreErrors&quot;">​</a></h1><p>Namespace: <a href="./Belay.Attributes.html">Belay.Attributes</a><br> Assembly: Belay.Attributes.dll</p><h2 id="ignoreerrors" tabindex="-1"><a id="Belay_Attributes_TeardownAttribute_IgnoreErrors"></a> IgnoreErrors <a class="header-anchor" href="#ignoreerrors" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Attributes_TeardownAttribute_IgnoreErrors&quot;&gt;&lt;/a&gt; IgnoreErrors&quot;">​</a></h2><p>Gets or sets a value indicating whether gets or sets whether errors in this teardown method should be ignored. When true, exceptions from this method will be logged but will not prevent other teardown methods from executing or the disconnection from proceeding.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IgnoreErrors { get; set; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="property-value" tabindex="-1">Property Value <a class="header-anchor" href="#property-value" aria-label="Permalink to &quot;Property Value&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><pre><code class="lang-csharp">[Teardown(IgnoreErrors = true)]
private async Task LogFinalStateAsync()
{
    // Nice to have, but not critical if it fails
    await ExecuteAsync(&quot;log_final_device_state()&quot;);
}

[Teardown(IgnoreErrors = false)]
private async Task EmergencyStopAsync()
{
    // Critical safety operation - must succeed
    await ExecuteAsync(&quot;emergency_stop_all_actuators()&quot;);
}</code></pre><h3 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h3><p> Set IgnoreErrors to true for teardown operations that are helpful but not critical, such as logging final state or cleaning up optional resources. Always keep it false for operations that could leave the device in an unsafe state if they fail. </p><p> Even when errors are ignored, they are still logged for diagnostic purposes. Teardown methods should still implement their own error handling for non-critical operations. </p>`,12)]))}const g=r(s,[["render",n]]);export{h as __pageData,g as default};
