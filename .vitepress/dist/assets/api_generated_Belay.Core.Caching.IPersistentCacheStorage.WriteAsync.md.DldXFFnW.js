import{_ as l,C as s,c as o,o as h,ag as p,G as i,j as a,w as _,a as t}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"Method WriteAsync<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Caching.IPersistentCacheStorage.WriteAsync.md","filePath":"api/generated/Belay.Core.Caching.IPersistentCacheStorage.WriteAsync.md"}'),d={name:"api/generated/Belay.Core.Caching.IPersistentCacheStorage.WriteAsync.md"};function c(k,e,g,y,m,C){const n=s("xref"),r=s("placeholder");return h(),o("div",null,[e[2]||(e[2]=p('<h1 id="method-writeasync-t" tabindex="-1"><a id="Belay_Core_Caching_IPersistentCacheStorage_WriteAsync__1_System_String___0_System_Nullable_System_TimeSpan__System_Threading_CancellationToken_"></a> Method WriteAsync&lt;T&gt; <a class="header-anchor" href="#method-writeasync-t" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Caching_IPersistentCacheStorage_WriteAsync__1_System_String___0_System_Nullable_System_TimeSpan__System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; Method WriteAsync&lt;T\\&gt;&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Caching.html">Belay.Core.Caching</a><br> Assembly: Belay.Core.dll</p><h2 id="writeasync-t-string-t-timespan-cancellationtoken" tabindex="-1"><a id="Belay_Core_Caching_IPersistentCacheStorage_WriteAsync__1_System_String___0_System_Nullable_System_TimeSpan__System_Threading_CancellationToken_"></a> WriteAsync&lt;T&gt;(string, T, TimeSpan?, CancellationToken) <a class="header-anchor" href="#writeasync-t-string-t-timespan-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Caching_IPersistentCacheStorage_WriteAsync__1_System_String___0_System_Nullable_System_TimeSpan__System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; WriteAsync&lt;T\\&gt;\\(string, T, TimeSpan?, CancellationToken\\)&quot;">​</a></h2><p>Writes a value to persistent storage.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WriteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeSpan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expiration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>key</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>The cache key.</p><p><code>value</code> T</p><p>The value to store.</p><p><code>expiration</code> <a href="https://learn.microsoft.com/dotnet/api/system.timespan" target="_blank" rel="noreferrer">TimeSpan</a>?</p><p>Optional expiration time.</p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><p>Cancellation token for the operation.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>',16)),i(r,null,{default:_(()=>[e[0]||(e[0]=t("A ",-1)),i(n,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=t(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]}),e[3]||(e[3]=a("h3",{id:"type-parameters",tabindex:"-1"},[t("Type Parameters "),a("a",{class:"header-anchor",href:"#type-parameters","aria-label":'Permalink to "Type Parameters"'},"​")],-1)),e[4]||(e[4]=a("p",null,[a("code",null,"T")],-1)),e[5]||(e[5]=a("p",null,"The type of the value to cache.",-1))])}const S=l(d,[["render",c]]);export{u as __pageData,S as default};
