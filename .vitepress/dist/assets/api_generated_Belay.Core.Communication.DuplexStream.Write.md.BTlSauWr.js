import{_ as a,C as r,c as s,o as i,ag as n,G as o,a as p}from"./chunks/framework.CUqMdM43.js";const y=JSON.parse('{"title":"Method Write","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Communication.DuplexStream.Write.md","filePath":"api/generated/Belay.Core.Communication.DuplexStream.Write.md"}'),l={name:"api/generated/Belay.Core.Communication.DuplexStream.Write.md"};function c(m,e,h,d,f,_){const t=r("xref");return i(),s("div",null,[e[0]||(e[0]=n('<h1 id="method-write" tabindex="-1"><a id="Belay_Core_Communication_DuplexStream_Write_System_Byte___System_Int32_System_Int32_"></a> Method Write <a class="header-anchor" href="#method-write" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Communication_DuplexStream_Write_System_Byte___System_Int32_System_Int32_&quot;&gt;&lt;/a&gt; Method Write&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Communication.html">Belay.Core.Communication</a><br> Assembly: Belay.Core.dll</p><h2 id="write-byte-int-int" tabindex="-1"><a id="Belay_Core_Communication_DuplexStream_Write_System_Byte___System_Int32_System_Int32_"></a> Write(byte[], int, int) <a class="header-anchor" href="#write-byte-int-int" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Communication_DuplexStream_Write_System_Byte___System_Int32_System_Int32_&quot;&gt;&lt;/a&gt; Write\\(byte\\[\\], int, int\\)&quot;">​</a></h2><p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>buffer</code> <a href="https://learn.microsoft.com/dotnet/api/system.byte" target="_blank" rel="noreferrer">byte</a>[]</p><p>An array of bytes. This method copies <code class="paramref">count</code> bytes from <code class="paramref">buffer</code> to the current stream.</p><p><code>offset</code> <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noreferrer">int</a></p><p>The zero-based byte offset in <code class="paramref">buffer</code> at which to begin copying bytes to the current stream.</p><p><code>count</code> <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noreferrer">int</a></p><p>The number of bytes to be written to the current stream.</p><h3 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noreferrer">ArgumentException</a></p><p>The sum of <code class="paramref">offset</code> and <code class="paramref">count</code> is greater than the buffer length.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p><code class="paramref">buffer</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception" target="_blank" rel="noreferrer">ArgumentOutOfRangeException</a></p><p><code class="paramref">offset</code> or <code class="paramref">count</code> is negative.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.io.ioexception" target="_blank" rel="noreferrer">IOException</a></p><p>An I/O error occurred, such as the specified file cannot be found.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.notsupportedexception" target="_blank" rel="noreferrer">NotSupportedException</a></p><p>The stream does not support writing.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noreferrer">ObjectDisposedException</a></p>',24)),o(t,{href:"System.IO.Stream.Write(System.Byte%5b%5d%2cSystem.Int32%2cSystem.Int32)","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=p(" was called after the stream was closed.",-1))])}const k=a(l,[["render",c]]);export{y as __pageData,k as default};
