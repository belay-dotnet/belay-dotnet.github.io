import{_ as r,C as l,c as o,o as h,ag as s,j as a,a as t,G as n}from"./chunks/framework.CUqMdM43.js";const _=JSON.parse('{"title":"Method ExecuteAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Communication.SerialDeviceCommunication.ExecuteAsync.md","filePath":"api/generated/Belay.Core.Communication.SerialDeviceCommunication.ExecuteAsync.md"}'),c={name:"api/generated/Belay.Core.Communication.SerialDeviceCommunication.ExecuteAsync.md"};function p(d,e,k,m,u,g){const i=l("xref");return h(),o("div",null,[e[4]||(e[4]=s('<h1 id="method-executeasync" tabindex="-1"><a id="Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync_System_String_System_Threading_CancellationToken_"></a> Method ExecuteAsync <a class="header-anchor" href="#method-executeasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; Method ExecuteAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Communication.html">Belay.Core.Communication</a><br> Assembly: Belay.Core.dll</p><h2 id="executeasync-string-cancellationtoken" tabindex="-1"><a id="Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync_System_String_System_Threading_CancellationToken_"></a> ExecuteAsync(string, CancellationToken) <a class="header-anchor" href="#executeasync-string-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; ExecuteAsync\\(string, CancellationToken\\)&quot;">​</a></h2><p>Execute Python code on the device and return the result as a string.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>code</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>&gt;</p>',10)),a("p",null,[e[0]||(e[0]=t("A ",-1)),n(i,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=t(" representing the asynchronous operation.",-1))]),e[5]||(e[5]=s('<h2 id="executeasync-t-string-cancellationtoken" tabindex="-1"><a id="Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync__1_System_String_System_Threading_CancellationToken_"></a> ExecuteAsync&lt;T&gt;(string, CancellationToken) <a class="header-anchor" href="#executeasync-t-string-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Communication_SerialDeviceCommunication_ExecuteAsync__1_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; ExecuteAsync&lt;T\\&gt;\\(string, CancellationToken\\)&quot;">​</a></h2><p>Execute Python code on the device and return the result as typed object.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>code</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;T&gt;</p>',8)),a("p",null,[e[2]||(e[2]=t("A ",-1)),n(i,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=t(" representing the asynchronous operation.",-1))]),e[6]||(e[6]=a("h3",{id:"type-parameters",tabindex:"-1"},[t("Type Parameters "),a("a",{class:"header-anchor",href:"#type-parameters","aria-label":'Permalink to "Type Parameters"'},"​")],-1)),e[7]||(e[7]=a("p",null,[a("code",null,"T")],-1))])}const C=r(c,[["render",p]]);export{_ as __pageData,C as default};
