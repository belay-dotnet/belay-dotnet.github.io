import{_ as t,c as a,o as n,ag as i}from"./chunks/framework.CUqMdM43.js";const k=JSON.parse('{"title":"Method ExecuteAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Device.ExecuteAsync.md","filePath":"api/generated/Belay.Core.Device.ExecuteAsync.md"}'),s={name:"api/generated/Belay.Core.Device.ExecuteAsync.md"};function r(o,e,c,l,p,h){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="method-executeasync" tabindex="-1"><a id="Belay_Core_Device_ExecuteAsync_System_String_System_Threading_CancellationToken_"></a> Method ExecuteAsync <a class="header-anchor" href="#method-executeasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Device_ExecuteAsync_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; Method ExecuteAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><h2 id="executeasync-string-cancellationtoken" tabindex="-1"><a id="Belay_Core_Device_ExecuteAsync_System_String_System_Threading_CancellationToken_"></a> ExecuteAsync(string, CancellationToken) <a class="header-anchor" href="#executeasync-string-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Device_ExecuteAsync_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; ExecuteAsync\\(string, CancellationToken\\)&quot;">​</a></h2><p>Execute Python code on the device and return the result. If called from a method with Belay attributes, applies attribute-specific policies.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>code</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>The Python code to execute.</p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><p>Cancellation token.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>&gt;</p><p>The execution result as a string.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><pre><code class="lang-csharp">var device = Device.FromConnectionString(&quot;serial:COM3&quot;);
await device.ConnectAsync();
string result = await device.ExecuteAsync(&quot;print(&#39;Hello World&#39;)&quot;);
// result contains the output from the device</code></pre><h3 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noreferrer">ObjectDisposedException</a></p><p>Thrown when the device has been disposed.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noreferrer">ArgumentException</a></p><p>Thrown when code is null or empty.</p><p><a href="./Belay.Core.Communication.DeviceConnectionException.html">DeviceConnectionException</a></p><p>Thrown when the device is not connected.</p><p><a href="./Belay.Core.Communication.DeviceExecutionException.html">DeviceExecutionException</a></p><p>Thrown when code execution fails on the device.</p><h2 id="executeasync-t-string-cancellationtoken" tabindex="-1"><a id="Belay_Core_Device_ExecuteAsync__1_System_String_System_Threading_CancellationToken_"></a> ExecuteAsync&lt;T&gt;(string, CancellationToken) <a class="header-anchor" href="#executeasync-t-string-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Device_ExecuteAsync__1_System_String_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; ExecuteAsync&lt;T\\&gt;\\(string, CancellationToken\\)&quot;">​</a></h2><p>Execute Python code on the device and return the result as a typed object. If called from a method with Belay attributes, applies attribute-specific policies.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>code</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>The Python code to execute.</p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><p>Cancellation token.</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;T&gt;</p><p>The execution result cast to the specified type.</p><h3 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p><code>T</code></p><p>The expected return type.</p><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><pre><code class="lang-csharp">var device = Device.FromConnectionString(&quot;serial:COM3&quot;);
await device.ConnectAsync();

// Execute code that returns a number
int result = await device.ExecuteAsync&lt;int&gt;(&quot;2 + 3&quot;);

// Execute code that returns a complex object
var data = await device.ExecuteAsync&lt;Dictionary&lt;string, object&gt;&gt;(&quot;{&#39;temperature&#39;: 25.5, &#39;humidity&#39;: 60}&quot;);</code></pre><h3 id="exceptions-1" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-1" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noreferrer">ObjectDisposedException</a></p><p>Thrown when the device has been disposed.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noreferrer">ArgumentException</a></p><p>Thrown when code is null or empty.</p><p><a href="./Belay.Core.Communication.DeviceConnectionException.html">DeviceConnectionException</a></p><p>Thrown when the device is not connected.</p><p><a href="./Belay.Core.Communication.DeviceExecutionException.html">DeviceExecutionException</a></p><p>Thrown when code execution fails on the device.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_blank" rel="noreferrer">InvalidOperationException</a></p><p>Thrown when the result cannot be converted to type T.</p>`,51)]))}const u=t(s,[["render",r]]);export{k as __pageData,u as default};
