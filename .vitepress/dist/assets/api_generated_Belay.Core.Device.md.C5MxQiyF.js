import{_ as n,C as s,c,o as l,ag as r,j as t,a,G as i}from"./chunks/framework.CUqMdM43.js";const g=JSON.parse('{"title":"Class Device","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Device.md","filePath":"api/generated/Belay.Core.Device.md"}'),h={name:"api/generated/Belay.Core.Device.md"};function _(p,e,d,m,y,v){const o=s("xref");return l(),c("div",null,[e[6]||(e[6]=r(`<h1 id="class-device" tabindex="-1"><a id="Belay_Core_Device"></a> Class Device <a class="header-anchor" href="#class-device" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Device&quot;&gt;&lt;/a&gt; Class Device&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><p>Main entry point for MicroPython device communication. Provides a high-level interface for connecting to and interacting with MicroPython devices.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDisposable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Belay.Core.Device.html">Device</a></p><h4 id="derived" tabindex="-1">Derived <a class="header-anchor" href="#derived" aria-label="Permalink to &quot;Derived&quot;">​</a></h4><p><a href="./Belay.Core.Examples.SimpleDevice.html">SimpleDevice</a></p><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.idisposable" target="_blank" rel="noreferrer">IDisposable</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noreferrer">object.MemberwiseClone()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p><strong>Basic Usage</strong></p><pre><code class="lang-csharp">using var device = Device.FromConnectionString(&quot;subprocess:micropython&quot;);
await device.ConnectAsync();

// Execute code directly
var result = await device.ExecuteAsync&lt;int&gt;(&quot;2 + 3&quot;);

// Check device capabilities
Console.WriteLine($&quot;Platform: {device.State.Capabilities?.Platform}&quot;);
Console.WriteLine($&quot;Features: {device.State.Capabilities?.SupportedFeatures}&quot;);</code></pre><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p> This refactored Device class eliminates complex session management in favor of simple DeviceState tracking, providing direct device communication with improved performance and reliability. </p><p> Key improvements over the session-based approach: <ul><li>Eliminates race conditions from concurrent session creation</li><li>Reduces initialization time from ~2000ms to &lt;100ms</li><li>Provides direct executor access without session indirection</li><li>Aligns with single-threaded MicroPython device reality</li></ul></p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><p><a href="./Belay.Core.Device.-ctor.html#Belay_Core_Device__ctor_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_Belay_Core_Device__">Device(DeviceConnection, ILogger&lt;Device&gt;?)</a></p>`,20)),t("p",null,[e[0]||(e[0]=a("Initializes a new instance of the ",-1)),i(o,{href:"Belay.Core.Device","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a(" class.",-1))]),e[7]||(e[7]=t("p",null,[t("a",{href:"./Belay.Core.Device.-ctor.html#Belay_Core_Device__ctor_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_Belay_Core_Device__Microsoft_Extensions_Logging_ILoggerFactory_"},"Device(DeviceConnection, ILogger<Device>?, ILoggerFactory?)")],-1)),t("p",null,[e[2]||(e[2]=a("Initializes a new instance of the ",-1)),i(o,{href:"Belay.Core.Device","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=a(" class.",-1))]),e[8]||(e[8]=t("p",null,[t("a",{href:"./Belay.Core.Device.-ctor.html#Belay_Core_Device__ctor_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_Belay_Core_Device__Microsoft_Extensions_Logging_ILoggerFactory_Belay_Core_Execution_IExecutionContextService_"},"Device(DeviceConnection, ILogger<Device>?, ILoggerFactory?, IExecutionContextService?)")],-1)),t("p",null,[e[4]||(e[4]=a("Initializes a new instance of the ",-1)),i(o,{href:"Belay.Core.Device","data-throw-if-not-resolved":"false"}),e[5]||(e[5]=a(" class with dependency injection support.",-1))]),e[9]||(e[9]=r('<h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><a href="./Belay.Core.Device.ConnectionState.html#Belay_Core_Device_ConnectionState">ConnectionState</a></p><p>Gets the current connection state of the device.</p><p><a href="./Belay.Core.Device.Executor.html#Belay_Core_Device_Executor">Executor</a></p><p>Gets the direct executor that handles all attribute types via AttributeHandler.</p><p><a href="./Belay.Core.Device.State.html#Belay_Core_Device_State">State</a></p><p>Gets the device state including capabilities, current operations, and connection status.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Device.ConnectAsync.html#Belay_Core_Device_ConnectAsync_System_Threading_CancellationToken_">ConnectAsync(CancellationToken)</a></p><p>Connect to the MicroPython device and perform capability detection.</p><p><a href="./Belay.Core.Device.DisconnectAsync.html#Belay_Core_Device_DisconnectAsync_System_Threading_CancellationToken_">DisconnectAsync(CancellationToken)</a></p><p>Disconnect from the MicroPython device.</p><p><a href="./Belay.Core.Device.DiscoverDevicesAsync.html#Belay_Core_Device_DiscoverDevicesAsync_System_Threading_CancellationToken_">DiscoverDevicesAsync(CancellationToken)</a></p><p>Discover available MicroPython devices on the system.</p><p><a href="./Belay.Core.Device.DiscoverFirstAsync.html#Belay_Core_Device_DiscoverFirstAsync_Microsoft_Extensions_Logging_ILoggerFactory_System_Threading_CancellationToken_">DiscoverFirstAsync(ILoggerFactory?, CancellationToken)</a></p><p>Create a Device instance for the first discovered MicroPython device.</p><p><a href="./Belay.Core.Device.Dispose.html#Belay_Core_Device_Dispose">Dispose()</a></p><p>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</p><p><a href="./Belay.Core.Device.ExecuteAsync.html#Belay_Core_Device_ExecuteAsync_System_String_System_Threading_CancellationToken_">ExecuteAsync(string, CancellationToken)</a></p><p>Execute Python code on the device and return the result. If called from a method with Belay attributes, applies attribute-specific policies.</p><p><a href="./Belay.Core.Device.ExecuteAsync.html#Belay_Core_Device_ExecuteAsync__1_System_String_System_Threading_CancellationToken_">ExecuteAsync&lt;T&gt;(string, CancellationToken)</a></p><p>Execute Python code on the device and return the result as a typed object. If called from a method with Belay attributes, applies attribute-specific policies.</p><p><a href="./Belay.Core.Device.ExecuteMethodAsync.html#Belay_Core_Device_ExecuteMethodAsync__1_System_Reflection_MethodInfo_System_Object_System_Object___System_Threading_CancellationToken_">ExecuteMethodAsync&lt;T&gt;(MethodInfo, object?, object?[]?, CancellationToken)</a></p><p>Executes a method with automatic executor selection based on attributes. This is the main entry point for the attribute-based programming model and uses secure execution context.</p><p><a href="./Belay.Core.Device.ExecuteMethodAsync.html#Belay_Core_Device_ExecuteMethodAsync_System_Reflection_MethodInfo_System_Object_System_Object___System_Threading_CancellationToken_">ExecuteMethodAsync(MethodInfo, object?, object?[]?, CancellationToken)</a></p><p>Executes a method without returning a value with automatic executor selection based on attributes.</p><p><a href="./Belay.Core.Device.FromConnectionString.html#Belay_Core_Device_FromConnectionString_System_String_Microsoft_Extensions_Logging_ILoggerFactory_">FromConnectionString(string, ILoggerFactory?)</a></p><p>Create a Device instance from a connection string.</p><p><a href="./Belay.Core.Device.GetFileAsync.html#Belay_Core_Device_GetFileAsync_System_String_System_Threading_CancellationToken_">GetFileAsync(string, CancellationToken)</a></p><p>Retrieve a file from the device to the local system.</p><p><a href="./Belay.Core.Device.PutFileAsync.html#Belay_Core_Device_PutFileAsync_System_String_System_String_System_Threading_CancellationToken_">PutFileAsync(string, string, CancellationToken)</a></p><p>Transfer a file from the local system to the device.</p><p><a href="./Belay.Core.Device.OutputReceived.html#Belay_Core_Device_OutputReceived">OutputReceived</a></p><p>Event raised when output is received from the device.</p><p><a href="./Belay.Core.Device.StateChanged.html#Belay_Core_Device_StateChanged">StateChanged</a></p><p>Event raised when device connection state changes.</p>',36))])}const f=n(h,[["render",_]]);export{g as __pageData,f as default};
