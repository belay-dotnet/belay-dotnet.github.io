import{_ as l,C as a,c as r,o as h,ag as p,G as i,w as k,a as n}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"Method CleanupHardwareAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.CleanupHardwareAsync.md","filePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.CleanupHardwareAsync.md"}'),d={name:"api/generated/Belay.Core.Examples.IEnvironmentMonitor.CleanupHardwareAsync.md"};function o(F,s,C,y,g,c){const e=a("xref"),t=a("placeholder");return h(),r("div",null,[s[2]||(s[2]=p(`<h1 id="method-cleanuphardwareasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_CleanupHardwareAsync"></a> Method CleanupHardwareAsync <a class="header-anchor" href="#method-cleanuphardwareasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_CleanupHardwareAsync&quot;&gt;&lt;/a&gt; Method CleanupHardwareAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="cleanuphardwareasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_CleanupHardwareAsync"></a> CleanupHardwareAsync() <a class="header-anchor" href="#cleanuphardwareasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_CleanupHardwareAsync&quot;&gt;&lt;/a&gt; CleanupHardwareAsync\\(\\)&quot;">​</a></h2><p>Clean up hardware resources and put sensors in safe state. This runs last during disconnection.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Cleaning up hardware...&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        try:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            # Clean up ADC resources</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if &#39;temp_adc&#39; in globals():</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                temp_adc = None</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if &#39;light_adc&#39; in globals():</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                light_adc = None</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            # Clean up I2C</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if &#39;i2c&#39; in globals():</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                i2c = None</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            # Clear global state</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            globals().pop(&#39;monitoring_active&#39;, None)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            globals().pop(&#39;data_buffer&#39;, None)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            globals().pop(&#39;sensor_calibration&#39;, None)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            print(&#39;Hardware cleanup completed&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        except Exception as e:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            print(f&#39;Hardware cleanup error: {e}&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnableParameterSubstitution</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CleanupHardwareAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,7)),i(t,null,{default:k(()=>[s[0]||(s[0]=n("A ",-1)),i(e,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),s[1]||(s[1]=n(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const B=l(d,[["render",o]]);export{u as __pageData,B as default};
