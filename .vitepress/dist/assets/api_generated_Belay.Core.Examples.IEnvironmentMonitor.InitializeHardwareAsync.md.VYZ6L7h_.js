import{_ as r,C as a,c as l,o as h,ag as p,G as s,w as k,a as n}from"./chunks/framework.CUqMdM43.js";const E=JSON.parse('{"title":"Method InitializeHardwareAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.InitializeHardwareAsync.md","filePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.InitializeHardwareAsync.md"}'),d={name:"api/generated/Belay.Core.Examples.IEnvironmentMonitor.InitializeHardwareAsync.md"};function o(F,i,C,y,c,g){const e=a("xref"),t=a("placeholder");return h(),l("div",null,[i[2]||(i[2]=p(`<h1 id="method-initializehardwareasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_InitializeHardwareAsync"></a> Method InitializeHardwareAsync <a class="header-anchor" href="#method-initializehardwareasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_InitializeHardwareAsync&quot;&gt;&lt;/a&gt; Method InitializeHardwareAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="initializehardwareasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_InitializeHardwareAsync"></a> InitializeHardwareAsync() <a class="header-anchor" href="#initializehardwareasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_InitializeHardwareAsync&quot;&gt;&lt;/a&gt; InitializeHardwareAsync\\(\\)&quot;">​</a></h2><p>Initialize hardware pins and basic sensor configuration. This runs first during device connection.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        import machine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        import time</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Configure analog pins for sensors</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        temp_pin = machine.Pin(26)  # Temperature sensor (ADC0)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        light_pin = machine.Pin(27) # Light sensor (ADC1) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Initialize ADC with proper attenuation for 3.3V range</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        temp_adc = machine.ADC(temp_pin)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        light_adc = machine.ADC(light_pin)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        temp_adc.atten(machine.ADC.ATTN_11DB)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        light_adc.atten(machine.ADC.ATTN_11DB)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Configure I2C for humidity sensor (SHT30)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        i2c = machine.I2C(0, scl=machine.Pin(22), sda=machine.Pin(21), freq=400000)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Hardware initialized successfully&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitializeHardwareAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,7)),s(t,null,{default:k(()=>[i[0]||(i[0]=n("A ",-1)),s(e,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),i[1]||(i[1]=n(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const _=r(d,[["render",o]]);export{E as __pageData,_ as default};
