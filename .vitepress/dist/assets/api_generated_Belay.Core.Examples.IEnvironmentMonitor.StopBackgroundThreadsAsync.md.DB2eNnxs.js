import{_ as r,C as a,c as h,o,ag as l,G as i,w as p,a as n}from"./chunks/framework.CUqMdM43.js";const E=JSON.parse('{"title":"Method StopBackgroundThreadsAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopBackgroundThreadsAsync.md","filePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopBackgroundThreadsAsync.md"}'),d={name:"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopBackgroundThreadsAsync.md"};function k(c,s,g,y,F,u){const e=a("xref"),t=a("placeholder");return o(),h("div",null,[s[2]||(s[2]=l(`<h1 id="method-stopbackgroundthreadsasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_StopBackgroundThreadsAsync"></a> Method StopBackgroundThreadsAsync <a class="header-anchor" href="#method-stopbackgroundthreadsasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_StopBackgroundThreadsAsync&quot;&gt;&lt;/a&gt; Method StopBackgroundThreadsAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="stopbackgroundthreadsasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_StopBackgroundThreadsAsync"></a> StopBackgroundThreadsAsync() <a class="header-anchor" href="#stopbackgroundthreadsasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_StopBackgroundThreadsAsync&quot;&gt;&lt;/a&gt; StopBackgroundThreadsAsync\\(\\)&quot;">​</a></h2><p>Stop all background monitoring threads. This runs first during disconnection.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Stopping background threads...&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Signal all threads to stop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        globals()[&#39;monitoring_active&#39;] = False</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Wait for threads to notice and shut down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        import time</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        time.sleep_ms(500)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Background threads stopped&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StopBackgroundThreadsAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,7)),i(t,null,{default:p(()=>[s[0]||(s[0]=n("A ",-1)),i(e,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),s[1]||(s[1]=n(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const m=r(d,[["render",k]]);export{E as __pageData,m as default};
