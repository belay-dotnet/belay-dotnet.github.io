import{_ as o,C as i,c as r,o as p,ag as l,G as n,w as h,a}from"./chunks/framework.CUqMdM43.js";const C=JSON.parse('{"title":"Method StopMonitoringAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopMonitoringAsync.md","filePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopMonitoringAsync.md"}'),k={name:"api/generated/Belay.Core.Examples.IEnvironmentMonitor.StopMonitoringAsync.md"};function d(g,s,m,y,c,E){const t=i("xref"),e=i("placeholder");return p(),r("div",null,[s[2]||(s[2]=l(`<h1 id="method-stopmonitoringasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_StopMonitoringAsync"></a> Method StopMonitoringAsync <a class="header-anchor" href="#method-stopmonitoringasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_StopMonitoringAsync&quot;&gt;&lt;/a&gt; Method StopMonitoringAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="stopmonitoringasync" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor_StopMonitoringAsync"></a> StopMonitoringAsync() <a class="header-anchor" href="#stopmonitoringasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor_StopMonitoringAsync&quot;&gt;&lt;/a&gt; StopMonitoringAsync\\(\\)&quot;">​</a></h2><p>Stop continuous monitoring thread.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Stopping continuous monitoring...&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        globals()[&#39;monitoring_active&#39;] = False</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        # Wait a moment for thread to notice</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        import time</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        time.sleep_ms(100)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(&#39;Monitoring stopped&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StopMonitoringAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,7)),n(e,null,{default:h(()=>[s[0]||(s[0]=a("A ",-1)),n(t,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),s[1]||(s[1]=a(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const _=o(k,[["render",d]]);export{C as __pageData,_ as default};
