import{_ as n,c as a,o as t,ag as o}from"./chunks/framework.CUqMdM43.js";const h=JSON.parse('{"title":"Interface IEnvironmentMonitor","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.md","filePath":"api/generated/Belay.Core.Examples.IEnvironmentMonitor.md"}'),r={name:"api/generated/Belay.Core.Examples.IEnvironmentMonitor.md"};function i(s,e,l,p,m,c){return t(),a("div",null,e[0]||(e[0]=[o('<h1 id="interface-ienvironmentmonitor" tabindex="-1"><a id="Belay_Core_Examples_IEnvironmentMonitor"></a> Interface IEnvironmentMonitor <a class="header-anchor" href="#interface-ienvironmentmonitor" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_IEnvironmentMonitor&quot;&gt;&lt;/a&gt; Interface IEnvironmentMonitor&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><p>Interface demonstrating comprehensive attribute-driven device programming. This environmental monitoring device showcases the complete lifecycle using [Setup], [Task], [Thread], and [Teardown] attributes with method interception.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IEnvironmentMonitor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p> This interface shows how to build complex device behavior using only attributes and Python code embedding, eliminating the need for manual ExecuteAsync calls. The method interception system automatically handles Python code execution. </p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.CalibrateSensorsAsync.html#Belay_Core_Examples_IEnvironmentMonitor_CalibrateSensorsAsync_System_Single_System_Single_">CalibrateSensorsAsync(float, float)</a></p><p>Perform sensor calibration routine. This should be done in known environmental conditions.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.CleanupHardwareAsync.html#Belay_Core_Examples_IEnvironmentMonitor_CleanupHardwareAsync">CleanupHardwareAsync()</a></p><p>Clean up hardware resources and put sensors in safe state. This runs last during disconnection.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.GetCurrentReadingAsync.html#Belay_Core_Examples_IEnvironmentMonitor_GetCurrentReadingAsync">GetCurrentReadingAsync()</a></p><p>Read current environmental conditions from all sensors.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.GetDiagnosticsAsync.html#Belay_Core_Examples_IEnvironmentMonitor_GetDiagnosticsAsync">GetDiagnosticsAsync()</a></p><p>Get device diagnostics and sensor health information.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.InitializeHardwareAsync.html#Belay_Core_Examples_IEnvironmentMonitor_InitializeHardwareAsync">InitializeHardwareAsync()</a></p><p>Initialize hardware pins and basic sensor configuration. This runs first during device connection.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.InitializeMonitoringStateAsync.html#Belay_Core_Examples_IEnvironmentMonitor_InitializeMonitoringStateAsync">InitializeMonitoringStateAsync()</a></p><p>Initialize global monitoring state and data structures. This runs last in the setup sequence.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.LoadCalibrationAsync.html#Belay_Core_Examples_IEnvironmentMonitor_LoadCalibrationAsync">LoadCalibrationAsync()</a></p><p>Load calibration data and configure sensor parameters. This runs after hardware initialization.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.SaveDataAsync.html#Belay_Core_Examples_IEnvironmentMonitor_SaveDataAsync">SaveDataAsync()</a></p><p>Save current data buffer and statistics to persistent storage. This runs after stopping threads but before hardware cleanup.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.StartContinuousMonitoringAsync.html#Belay_Core_Examples_IEnvironmentMonitor_StartContinuousMonitoringAsync_System_Int32_">StartContinuousMonitoringAsync(int)</a></p><p>Start continuous environmental monitoring in a background thread. Data is collected at the specified interval and can trigger alerts.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.StartHealthWatchdogAsync.html#Belay_Core_Examples_IEnvironmentMonitor_StartHealthWatchdogAsync">StartHealthWatchdogAsync()</a></p><p>Start a watchdog thread that monitors system health.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.StopBackgroundThreadsAsync.html#Belay_Core_Examples_IEnvironmentMonitor_StopBackgroundThreadsAsync">StopBackgroundThreadsAsync()</a></p><p>Stop all background monitoring threads. This runs first during disconnection.</p><p><a href="./Belay.Core.Examples.IEnvironmentMonitor.StopMonitoringAsync.html#Belay_Core_Examples_IEnvironmentMonitor_StopMonitoringAsync">StopMonitoringAsync()</a></p><p>Stop continuous monitoring thread.</p>',31)]))}const y=n(r,[["render",i]]);export{h as __pageData,y as default};
