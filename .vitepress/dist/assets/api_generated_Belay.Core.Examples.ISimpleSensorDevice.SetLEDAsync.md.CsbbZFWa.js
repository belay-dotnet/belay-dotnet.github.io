import{_ as l,C as s,c as r,o as p,ag as o,G as a,w as h,a as t}from"./chunks/framework.CUqMdM43.js";const S=JSON.parse('{"title":"Method SetLEDAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.ISimpleSensorDevice.SetLEDAsync.md","filePath":"api/generated/Belay.Core.Examples.ISimpleSensorDevice.SetLEDAsync.md"}'),d={name:"api/generated/Belay.Core.Examples.ISimpleSensorDevice.SetLEDAsync.md"};function k(c,e,m,y,E,_){const i=s("xref"),n=s("placeholder");return p(),r("div",null,[e[2]||(e[2]=o(`<h1 id="method-setledasync" tabindex="-1"><a id="Belay_Core_Examples_ISimpleSensorDevice_SetLEDAsync_System_Int32_System_Boolean_"></a> Method SetLEDAsync <a class="header-anchor" href="#method-setledasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_ISimpleSensorDevice_SetLEDAsync_System_Int32_System_Boolean_&quot;&gt;&lt;/a&gt; Method SetLEDAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="setledasync-int-bool" tabindex="-1"><a id="Belay_Core_Examples_ISimpleSensorDevice_SetLEDAsync_System_Int32_System_Boolean_"></a> SetLEDAsync(int, bool) <a class="header-anchor" href="#setledasync-int-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_ISimpleSensorDevice_SetLEDAsync_System_Int32_System_Boolean_&quot;&gt;&lt;/a&gt; SetLEDAsync\\(int, bool\\)&quot;">​</a></h2><p>Controls an LED with specified pin and state. Demonstrates parameter substitution in Python code.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PythonCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        import machine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        led = machine.Pin({pin}, machine.Pin.OUT)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        led.value({state})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(f&#39;LED on pin {pin} set to {state}&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetLEDAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>pin</code> <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noreferrer">int</a></p><p>The GPIO pin number for the LED.</p><p><code>state</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>The LED state (True for on, False for off).</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,12)),a(n,null,{default:h(()=>[e[0]||(e[0]=t("A ",-1)),a(i,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=t(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const F=l(d,[["render",k]]);export{S as __pageData,F as default};
