import{_ as l,C as a,c as r,o as p,ag as o,G as i,w as h,a as s}from"./chunks/framework.CUqMdM43.js";const E=JSON.parse('{"title":"Method InitializeAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Examples.SimpleDevice.InitializeAsync.md","filePath":"api/generated/Belay.Core.Examples.SimpleDevice.InitializeAsync.md"}'),d={name:"api/generated/Belay.Core.Examples.SimpleDevice.InitializeAsync.md"};function c(k,e,m,y,_,u){const t=a("xref"),n=a("placeholder");return p(),r("div",null,[e[2]||(e[2]=o(`<h1 id="method-initializeasync" tabindex="-1"><a id="Belay_Core_Examples_SimpleDevice_InitializeAsync"></a> Method InitializeAsync <a class="header-anchor" href="#method-initializeasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_SimpleDevice_InitializeAsync&quot;&gt;&lt;/a&gt; Method InitializeAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Examples.html">Belay.Core.Examples</a><br> Assembly: Belay.Core.dll</p><h2 id="initializeasync" tabindex="-1"><a id="Belay_Core_Examples_SimpleDevice_InitializeAsync"></a> InitializeAsync() <a class="header-anchor" href="#initializeasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Examples_SimpleDevice_InitializeAsync&quot;&gt;&lt;/a&gt; InitializeAsync\\(\\)&quot;">​</a></h2><p>Setup method that initializes the device. Demonstrates [Setup] attribute for initialization code.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitializeAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>`,7)),i(n,null,{default:h(()=>[e[0]||(e[0]=s("A ",-1)),i(t,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=s(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]})])}const C=l(d,[["render",c]]);export{E as __pageData,C as default};
