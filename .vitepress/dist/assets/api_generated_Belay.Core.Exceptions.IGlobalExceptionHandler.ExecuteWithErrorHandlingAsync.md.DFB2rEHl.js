import{_ as t,c as a,o as s,ag as i}from"./chunks/framework.CUqMdM43.js";const k=JSON.parse('{"title":"Method ExecuteWithErrorHandlingAsync<TResult>","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.ExecuteWithErrorHandlingAsync.md","filePath":"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.ExecuteWithErrorHandlingAsync.md"}'),r={name:"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.ExecuteWithErrorHandlingAsync.md"};function n(l,e,h,o,p,c){return s(),a("div",null,e[0]||(e[0]=[i('<h1 id="method-executewitherrorhandlingasync-tresult" tabindex="-1"><a id="Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync__1_System_Func_System_Threading_Tasks_Task___0___System_String_"></a> Method ExecuteWithErrorHandlingAsync&lt;TResult&gt; <a class="header-anchor" href="#method-executewitherrorhandlingasync-tresult" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync__1_System_Func_System_Threading_Tasks_Task___0___System_String_&quot;&gt;&lt;/a&gt; Method ExecuteWithErrorHandlingAsync&lt;TResult\\&gt;&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Exceptions.html">Belay.Core.Exceptions</a><br> Assembly: Belay.Core.dll</p><h2 id="executewitherrorhandlingasync-tresult-func-task-tresult-string" tabindex="-1"><a id="Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync__1_System_Func_System_Threading_Tasks_Task___0___System_String_"></a> ExecuteWithErrorHandlingAsync&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;, string?) <a class="header-anchor" href="#executewitherrorhandlingasync-tresult-func-task-tresult-string" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync__1_System_Func_System_Threading_Tasks_Task___0___System_String_&quot;&gt;&lt;/a&gt; ExecuteWithErrorHandlingAsync&lt;TResult\\&gt;\\(Func&lt;Task&lt;TResult\\&gt;\\&gt;, string?\\)&quot;">​</a></h2><p>Executes an operation with error handling and returns a result.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteWithErrorHandlingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>operation</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-1" target="_blank" rel="noreferrer">Func</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TResult&gt;&gt;</p><p>The operation to execute.</p><p><code>context</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>?</p><p>The context information.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TResult&gt;</p><p>The result of the operation.</p><h3 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><p><code>TResult</code></p><p>The result type.</p><h2 id="executewitherrorhandlingasync-func-task-string" tabindex="-1"><a id="Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync_System_Func_System_Threading_Tasks_Task__System_String_"></a> ExecuteWithErrorHandlingAsync(Func&lt;Task&gt;, string?) <a class="header-anchor" href="#executewitherrorhandlingasync-func-task-string" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync_System_Func_System_Threading_Tasks_Task__System_String_&quot;&gt;&lt;/a&gt; ExecuteWithErrorHandlingAsync\\(Func&lt;Task\\&gt;, string?\\)&quot;">​</a></h2><p>Executes an operation with error handling.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteWithErrorHandlingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>operation</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-1" target="_blank" rel="noreferrer">Func</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a>&gt;</p><p>The operation to execute.</p><p><code>context</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>?</p><p>The context information.</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p><p>A task representing the operation.</p>',27)]))}const g=t(r,[["render",n]]);export{k as __pageData,g as default};
