import{_ as a,c as n,o as t,ag as i}from"./chunks/framework.CUqMdM43.js";const h=JSON.parse('{"title":"Interface IGlobalExceptionHandler","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.md","filePath":"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.md"}'),l={name:"api/generated/Belay.Core.Exceptions.IGlobalExceptionHandler.md"};function o(r,e,s,c,p,d){return t(),n("div",null,e[0]||(e[0]=[i('<h1 id="interface-iglobalexceptionhandler" tabindex="-1"><a id="Belay_Core_Exceptions_IGlobalExceptionHandler"></a> Interface IGlobalExceptionHandler <a class="header-anchor" href="#interface-iglobalexceptionhandler" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Exceptions_IGlobalExceptionHandler&quot;&gt;&lt;/a&gt; Interface IGlobalExceptionHandler&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Exceptions.html">Belay.Core.Exceptions</a><br> Assembly: Belay.Core.dll</p><p>Interface for global exception handling across the application.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IGlobalExceptionHandler</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Exceptions.IGlobalExceptionHandler.ConfigureExceptionHandling.html#Belay_Core_Exceptions_IGlobalExceptionHandler_ConfigureExceptionHandling_System_Action_Belay_Core_Exceptions_ExceptionHandlingConfiguration__">ConfigureExceptionHandling(Action&lt;ExceptionHandlingConfiguration&gt;)</a></p><p>Configures the exception handling behavior.</p><p><a href="./Belay.Core.Exceptions.IGlobalExceptionHandler.ExecuteWithErrorHandlingAsync.html#Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync__1_System_Func_System_Threading_Tasks_Task___0___System_String_">ExecuteWithErrorHandlingAsync&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;, string?)</a></p><p>Executes an operation with error handling and returns a result.</p><p><a href="./Belay.Core.Exceptions.IGlobalExceptionHandler.ExecuteWithErrorHandlingAsync.html#Belay_Core_Exceptions_IGlobalExceptionHandler_ExecuteWithErrorHandlingAsync_System_Func_System_Threading_Tasks_Task__System_String_">ExecuteWithErrorHandlingAsync(Func&lt;Task&gt;, string?)</a></p><p>Executes an operation with error handling.</p>',11)]))}const x=a(l,[["render",o]]);export{h as __pageData,x as default};
