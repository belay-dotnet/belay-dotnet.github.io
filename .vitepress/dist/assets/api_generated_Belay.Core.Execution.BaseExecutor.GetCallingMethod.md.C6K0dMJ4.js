import{_ as t,c as a,o as i,ag as s}from"./chunks/framework.CUqMdM43.js";const k=JSON.parse('{"title":"Method GetCallingMethod","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.BaseExecutor.GetCallingMethod.md","filePath":"api/generated/Belay.Core.Execution.BaseExecutor.GetCallingMethod.md"}'),n={name:"api/generated/Belay.Core.Execution.BaseExecutor.GetCallingMethod.md"};function l(r,e,o,h,d,p){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="method-getcallingmethod" tabindex="-1"><a id="Belay_Core_Execution_BaseExecutor_GetCallingMethod_System_Int32_"></a> Method GetCallingMethod <a class="header-anchor" href="#method-getcallingmethod" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_BaseExecutor_GetCallingMethod_System_Int32_&quot;&gt;&lt;/a&gt; Method GetCallingMethod&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Execution.html">Belay.Core.Execution</a><br> Assembly: Belay.Core.dll</p><h2 id="getcallingmethod-int" tabindex="-1"><a id="Belay_Core_Execution_BaseExecutor_GetCallingMethod_System_Int32_"></a> GetCallingMethod(int) <a class="header-anchor" href="#getcallingmethod-int" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_BaseExecutor_GetCallingMethod_System_Int32_&quot;&gt;&lt;/a&gt; GetCallingMethod\\(int\\)&quot;">​</a></h2><p>Gets the calling method information from the execution context. SECURITY NOTE: This is a secure replacement for stack frame reflection.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Obsolete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Use GetCurrentMethodContext() instead. Stack frame inspection is a security risk.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetCallingMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> skipFrames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>skipFrames</code> <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noreferrer">int</a></p><p>Deprecated parameter - kept for compatibility but ignored.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a>?</p><p>The calling method information, or null if not available.</p>`,11)]))}const g=t(n,[["render",l]]);export{k as __pageData,g as default};
