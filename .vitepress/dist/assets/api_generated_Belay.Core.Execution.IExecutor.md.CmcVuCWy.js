import{_ as t,c as a,o,ag as n}from"./chunks/framework.CUqMdM43.js";const d=JSON.parse('{"title":"Interface IExecutor","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.IExecutor.md","filePath":"api/generated/Belay.Core.Execution.IExecutor.md"}'),r={name:"api/generated/Belay.Core.Execution.IExecutor.md"};function i(c,e,s,l,u,h){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="interface-iexecutor" tabindex="-1"><a id="Belay_Core_Execution_IExecutor"></a> Interface IExecutor <a class="header-anchor" href="#interface-iexecutor" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_IExecutor&quot;&gt;&lt;/a&gt; Interface IExecutor&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Execution.html">Belay.Core.Execution</a><br> Assembly: Belay.Core.dll</p><p>Represents an executor that can handle specific types of attribute-decorated methods. This interface enables specialized execution strategies for different attribute types (Task, Setup, Thread, Teardown) while maintaining a consistent execution contract.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IExecutor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><a href="./Belay.Core.Execution.IExecutor.Priority.html#Belay_Core_Execution_IExecutor_Priority">Priority</a></p><p>Gets the priority of this executor. Higher values indicate higher priority. Used to determine execution order when multiple executors can handle the same method.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Execution.IExecutor.CanHandle.html#Belay_Core_Execution_IExecutor_CanHandle_System_Reflection_MethodInfo_">CanHandle(MethodInfo)</a></p><p>Determines whether this executor can handle the specified method.</p><p><a href="./Belay.Core.Execution.IExecutor.CleanupAsync.html#Belay_Core_Execution_IExecutor_CleanupAsync_System_Threading_CancellationToken_">CleanupAsync(CancellationToken)</a></p><p>Performs any necessary cleanup for the executor. Called when the executor is no longer needed.</p><p><a href="./Belay.Core.Execution.IExecutor.ExecuteAsync.html#Belay_Core_Execution_IExecutor_ExecuteAsync__1_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">ExecuteAsync&lt;T&gt;(ExecutionContext, CancellationToken)</a></p><p>Executes a method with a return value.</p><p><a href="./Belay.Core.Execution.IExecutor.ExecuteAsync.html#Belay_Core_Execution_IExecutor_ExecuteAsync_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">ExecuteAsync(ExecutionContext, CancellationToken)</a></p><p>Executes a method without a return value.</p>',16)]))}const _=t(r,[["render",i]]);export{d as __pageData,_ as default};
