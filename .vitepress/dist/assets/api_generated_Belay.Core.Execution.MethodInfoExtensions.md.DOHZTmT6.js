import{_ as t,c as o,o as a,ag as s}from"./chunks/framework.CUqMdM43.js";const p=JSON.parse('{"title":"Class MethodInfoExtensions","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.MethodInfoExtensions.md","filePath":"api/generated/Belay.Core.Execution.MethodInfoExtensions.md"}'),n={name:"api/generated/Belay.Core.Execution.MethodInfoExtensions.md"};function r(i,e,h,c,l,d){return a(),o("div",null,e[0]||(e[0]=[s(`<h1 id="class-methodinfoextensions" tabindex="-1"><a id="Belay_Core_Execution_MethodInfoExtensions"></a> Class MethodInfoExtensions <a class="header-anchor" href="#class-methodinfoextensions" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_MethodInfoExtensions&quot;&gt;&lt;/a&gt; Class MethodInfoExtensions&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Execution.html">Belay.Core.Execution</a><br> Assembly: Belay.Core.dll</p><p>Extension methods for MethodInfo to support the executor framework.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInfoExtensions</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Belay.Core.Execution.MethodInfoExtensions.html">MethodInfoExtensions</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noreferrer">object.MemberwiseClone()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p><strong>Method Name Conversion Examples</strong></p><pre><code class="lang-csharp">public class ExampleDevice : Device
{
    [Task]
    public async Task ReadSensorDataAsync() { } // → &quot;read_sensor_data_async&quot;

    [Task(Name = &quot;custom_sensor&quot;)]
    public async Task ReadTemperatureAsync() { } // → &quot;custom_sensor&quot;

    [Thread(Name = &quot;monitor_thread&quot;)]
    public async Task StartMonitoringAsync() { } // → &quot;monitor_thread&quot;
}

// Usage
var method = typeof(ExampleDevice).GetMethod(&quot;ReadSensorDataAsync&quot;);
string deviceName = method.GetDeviceMethodName(); // &quot;read_sensor_data_async&quot;
string hash = method.GetSignatureHash(); // &quot;A1B2C3D4&quot;
bool hasTask = method.HasAttribute&lt;TaskAttribute&gt;(); // true</code></pre><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Execution.MethodInfoExtensions.GetAttribute.html#Belay_Core_Execution_MethodInfoExtensions_GetAttribute__1_System_Reflection_MethodInfo_">GetAttribute&lt;T&gt;(MethodInfo)</a></p><p>Gets a specific attribute from a method.</p><p><a href="./Belay.Core.Execution.MethodInfoExtensions.GetDeviceMethodName.html#Belay_Core_Execution_MethodInfoExtensions_GetDeviceMethodName_System_Reflection_MethodInfo_">GetDeviceMethodName(MethodInfo)</a></p><p>Gets the device method name for a method, using custom name if specified in attributes.</p><p><a href="./Belay.Core.Execution.MethodInfoExtensions.GetSignatureHash.html#Belay_Core_Execution_MethodInfoExtensions_GetSignatureHash_System_Reflection_MethodInfo_">GetSignatureHash(MethodInfo)</a></p><p>Generates a simple hash of the method signature for caching.</p><p><a href="./Belay.Core.Execution.MethodInfoExtensions.HasAttribute.html#Belay_Core_Execution_MethodInfoExtensions_HasAttribute__1_System_Reflection_MethodInfo_">HasAttribute&lt;T&gt;(MethodInfo)</a></p><p>Checks if a method has a specific attribute.</p>`,20)]))}const u=t(n,[["render",r]]);export{p as __pageData,u as default};
