import{_ as n,C as o,c as r,o as s,ag as i,j as l,a,G as d}from"./chunks/framework.CUqMdM43.js";const C=JSON.parse('{"title":"Method CanHandle","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.SetupExecutor.CanHandle.md","filePath":"api/generated/Belay.Core.Execution.SetupExecutor.CanHandle.md"}'),h={name:"api/generated/Belay.Core.Execution.SetupExecutor.CanHandle.md"};function p(c,e,u,_,m,f){const t=o("xref");return s(),r("div",null,[e[2]||(e[2]=i('<h1 id="method-canhandle" tabindex="-1"><a id="Belay_Core_Execution_SetupExecutor_CanHandle_System_Reflection_MethodInfo_"></a> Method CanHandle <a class="header-anchor" href="#method-canhandle" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_SetupExecutor_CanHandle_System_Reflection_MethodInfo_&quot;&gt;&lt;/a&gt; Method CanHandle&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Execution.html">Belay.Core.Execution</a><br> Assembly: Belay.Core.dll</p><h2 id="canhandle-methodinfo" tabindex="-1"><a id="Belay_Core_Execution_SetupExecutor_CanHandle_System_Reflection_MethodInfo_"></a> CanHandle(MethodInfo) <a class="header-anchor" href="#canhandle-methodinfo" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution_SetupExecutor_CanHandle_System_Reflection_MethodInfo_&quot;&gt;&lt;/a&gt; CanHandle\\(MethodInfo\\)&quot;">​</a></h2><p>Determines whether this executor can handle the specified method.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CanHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>method</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a></p><p>The method to evaluate.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p>',10)),l("p",null,[e[0]||(e[0]=a("True if the method has a ",-1)),d(t,{href:"Belay.Attributes.SetupAttribute","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a("; otherwise, false.",-1))])])}const x=n(h,[["render",p]]);export{C as __pageData,x as default};
