import{_ as i,C as s,c,o as l,j as t,ag as r,a,G as n}from"./chunks/framework.CUqMdM43.js";const y=JSON.parse('{"title":"Class ThreadExecutor","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.ThreadExecutor.md","filePath":"api/generated/Belay.Core.Execution.ThreadExecutor.md"}'),h={name:"api/generated/Belay.Core.Execution.ThreadExecutor.md"};function u(d,e,_,p,x,m){const o=s("xref");return l(),c("div",null,[e[4]||(e[4]=t("h1",{id:"class-threadexecutor",tabindex:"-1"},[t("a",{id:"Belay_Core_Execution_ThreadExecutor"}),a(" Class ThreadExecutor "),t("a",{class:"header-anchor",href:"#class-threadexecutor","aria-label":'Permalink to "<a id="Belay_Core_Execution_ThreadExecutor"></a> Class ThreadExecutor"'},"​")],-1)),e[5]||(e[5]=t("p",null,[a("Namespace: "),t("a",{href:"./Belay.Core.Execution.html"},"Belay.Core.Execution"),t("br"),a(" Assembly: Belay.Core.dll")],-1)),t("p",null,[e[0]||(e[0]=a("Executor for methods decorated with the ",-1)),n(o,{href:"Belay.Attributes.ThreadAttribute","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a(". Handles background thread execution on MicroPython devices with lifecycle management, auto-restart capabilities, priority handling, and runtime limits.",-1))]),e[6]||(e[6]=r('<div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IExecutor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Belay.Core.Execution.BaseExecutor.html">BaseExecutor</a> ← <a href="./Belay.Core.Execution.ThreadExecutor.html">ThreadExecutor</a></p><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="./Belay.Core.Execution.IExecutor.html">IExecutor</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="./Belay.Core.Execution.BaseExecutor.Priority.html#Belay_Core_Execution_BaseExecutor_Priority">BaseExecutor.Priority</a>, <a href="./Belay.Core.Execution.BaseExecutor.CanHandle.html#Belay_Core_Execution_BaseExecutor_CanHandle_System_Reflection_MethodInfo_">BaseExecutor.CanHandle(MethodInfo)</a>, <a href="./Belay.Core.Execution.BaseExecutor.ExecuteAsync.html#Belay_Core_Execution_BaseExecutor_ExecuteAsync__1_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">BaseExecutor.ExecuteAsync&lt;T&gt;(ExecutionContext, CancellationToken)</a>, <a href="./Belay.Core.Execution.BaseExecutor.ExecuteAsync.html#Belay_Core_Execution_BaseExecutor_ExecuteAsync_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">BaseExecutor.ExecuteAsync(ExecutionContext, CancellationToken)</a>, <a href="./Belay.Core.Execution.BaseExecutor.CleanupAsync.html#Belay_Core_Execution_BaseExecutor_CleanupAsync_System_Threading_CancellationToken_">BaseExecutor.CleanupAsync(CancellationToken)</a>, <a href="./Belay.Core.Execution.BaseExecutor.Dispose.html#Belay_Core_Execution_BaseExecutor_Dispose">BaseExecutor.Dispose()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p> The ThreadExecutor is responsible for executing long-running background operations on MicroPython devices using the _thread module. It provides sophisticated thread lifecycle management including monitoring, auto-restart, and graceful termination. </p><p> Key features: <ul><li>Background thread creation and management using _thread module</li><li>Thread lifecycle tracking and monitoring</li><li>Auto-restart with exponential backoff for failed threads</li><li>Priority-based execution hints for compatible platforms</li><li>Runtime limits with graceful termination</li><li>Thread name management for identification and control</li></ul></p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><p><a href="./Belay.Core.Execution.ThreadExecutor.-ctor.html#Belay_Core_Execution_ThreadExecutor__ctor_Microsoft_Extensions_Logging_ILogger_Belay_Core_Execution_ThreadExecutor__">ThreadExecutor(ILogger&lt;ThreadExecutor&gt;?)</a></p>',12)),t("p",null,[e[2]||(e[2]=a("Initializes a new instance of the ",-1)),n(o,{href:"Belay.Core.Execution.ThreadExecutor","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=a(" class.",-1))]),e[7]||(e[7]=r('<h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><a href="./Belay.Core.Execution.ThreadExecutor.Priority.html#Belay_Core_Execution_ThreadExecutor_Priority">Priority</a></p><p>Gets the execution priority for this executor. Thread has medium priority (70) to allow setup/teardown to execute around it.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Execution.ThreadExecutor.ApplyExecutionPolicies.html#Belay_Core_Execution_ThreadExecutor_ApplyExecutionPolicies_Belay_Core_Execution_ExecutionContext_">ApplyExecutionPolicies(ExecutionContext)</a></p><p>Applies thread-specific execution policies from the ThreadAttribute.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.CanHandle.html#Belay_Core_Execution_ThreadExecutor_CanHandle_System_Reflection_MethodInfo_">CanHandle(MethodInfo)</a></p><p>Determines whether this executor can handle the specified method.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.CleanupAsync.html#Belay_Core_Execution_ThreadExecutor_CleanupAsync_System_Threading_CancellationToken_">CleanupAsync(CancellationToken)</a></p><p>Performs cleanup when the executor is disposed. Stops all active threads and releases resources.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.ExecuteAsync.html#Belay_Core_Execution_ThreadExecutor_ExecuteAsync__1_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">ExecuteAsync&lt;T&gt;(ExecutionContext, CancellationToken)</a></p><p>Executes thread methods with lifecycle tracking and monitoring.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.GeneratePythonCodeAsync.html#Belay_Core_Execution_ThreadExecutor_GeneratePythonCodeAsync_Belay_Core_Execution_ExecutionContext_System_Threading_CancellationToken_">GeneratePythonCodeAsync(ExecutionContext, CancellationToken)</a></p><p>Generates Python code for thread method execution. Creates a background thread using the _thread module with proper lifecycle management.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.GetActiveThreadsInfo.html#Belay_Core_Execution_ThreadExecutor_GetActiveThreadsInfo">GetActiveThreadsInfo()</a></p><p>Gets information about all active threads.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.GetCachingPolicyFromAttributes.html#Belay_Core_Execution_ThreadExecutor_GetCachingPolicyFromAttributes_System_Reflection_MethodInfo_">GetCachingPolicyFromAttributes(MethodInfo)</a></p><p>Gets caching policy from ThreadAttribute. Thread methods don&#39;t use caching as they manage their own state.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.GetTimeoutFromAttributes.html#Belay_Core_Execution_ThreadExecutor_GetTimeoutFromAttributes_System_Reflection_MethodInfo_">GetTimeoutFromAttributes(MethodInfo)</a></p><p>Gets timeout configuration from ThreadAttribute. Thread startup should be fast.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.StopAllThreadsAsync.html#Belay_Core_Execution_ThreadExecutor_StopAllThreadsAsync_System_Threading_CancellationToken_">StopAllThreadsAsync(CancellationToken)</a></p><p>Stops all active threads.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.StopThreadAsync.html#Belay_Core_Execution_ThreadExecutor_StopThreadAsync_System_String_Belay_Core_IDeviceConnection_System_Threading_CancellationToken_">StopThreadAsync(string, IDeviceConnection, CancellationToken)</a></p><p>Stops a specific thread by name.</p>',24))])}const C=i(h,[["render",u]]);export{y as __pageData,C as default};
