import{_ as t,c as a,o,ag as i}from"./chunks/framework.CUqMdM43.js";const d=JSON.parse('{"title":"Namespace Belay.Core.Execution","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.md","filePath":"api/generated/Belay.Core.Execution.md"}'),n={name:"api/generated/Belay.Core.Execution.md"};function c(r,e,p,h,s,l){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="namespace-belay-core-execution" tabindex="-1"><a id="Belay_Core_Execution"></a> Namespace Belay.Core.Execution <a class="header-anchor" href="#namespace-belay-core-execution" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution&quot;&gt;&lt;/a&gt; Namespace Belay.Core.Execution&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Belay.Core.Execution.BaseExecutor.html">BaseExecutor</a></p><p>Base class for all method executors that provides common functionality for applying policies around Device.ExecuteAsync calls.</p><p><a href="./Belay.Core.Execution.DeployedMethod.html">DeployedMethod</a></p><p>Represents a method that has been deployed to a device.</p><p><a href="./Belay.Core.Execution.DeploymentPipelineStage.html">DeploymentPipelineStage</a></p><p>Deployment pipeline stage that handles method deployment to the device.</p><p><a href="./Belay.Core.Execution.DeviceEnhancedExtensions.html">DeviceEnhancedExtensions</a></p><p>Extensions to the Device class for enhanced executor support.</p><p><a href="./Belay.Core.Execution.DeviceProxy-1.html">DeviceProxy&lt;T&gt;</a></p><p>Dynamic proxy that intercepts method calls and routes them through the enhanced executor. This enables seamless attribute-based programming where C# methods are automatically executed on MicroPython devices with proper attribute handling.</p><p><a href="./Belay.Core.Execution.DeviceProxyFactory.html">DeviceProxyFactory</a></p><p>Factory for creating device proxies with proper configuration.</p><p><a href="./Belay.Core.Execution.EnhancedDevice.html">EnhancedDevice</a></p><p>Enhanced device wrapper that provides access to advanced execution capabilities. This wrapper can be used when you need the enhanced features as first-class citizens.</p><p><a href="./Belay.Core.Execution.EnhancedExecutionStatistics.html">EnhancedExecutionStatistics</a></p><p>Statistics for enhanced execution.</p><p><a href="./Belay.Core.Execution.EnhancedExecutor.html">EnhancedExecutor</a></p><p>Enhanced executor that provides advanced method interception, pipeline processing, and enhanced attribute-based execution with pre/post-processing hooks.</p><p><a href="./Belay.Core.Execution.ExecutionContext-1.html">ExecutionContext&lt;T&gt;</a></p><p>Execution context for enhanced method execution.</p><p><a href="./Belay.Core.Execution.ExecutionContextService.html">ExecutionContextService</a></p><p>Thread-safe implementation of execution context service using AsyncLocal.</p><p><a href="./Belay.Core.Execution.ExecutionPipeline.html">ExecutionPipeline</a></p><p>Manages the execution pipeline and provides pipeline utilities.</p><p><a href="./Belay.Core.Execution.ExecutionPipelineStage.html">ExecutionPipelineStage</a></p><p>Execution pipeline stage that performs the actual method execution.</p><p><a href="./Belay.Core.Execution.MethodExecutionContext.html">MethodExecutionContext</a></p><p>Implementation of method execution context.</p><p><a href="./Belay.Core.Execution.MethodInfoExtensions.html">MethodInfoExtensions</a></p><p>Extension methods for MethodInfo to support the executor framework.</p><p><a href="./Belay.Core.Execution.MethodInterceptionContext.html">MethodInterceptionContext</a></p><p>Method interception context for caching pipeline configuration.</p><p><a href="./Belay.Core.Execution.RunningThread.html">RunningThread</a></p><p>Represents information about a running background thread on the device.</p><p><a href="./Belay.Core.Execution.SetupExecutor.html">SetupExecutor</a></p><p>Executor for methods decorated with the [Setup] attribute. Applies setup-specific policies such as one-time execution and ordered initialization.</p><p><a href="./Belay.Core.Execution.TaskAttributePipelineStage.html">TaskAttributePipelineStage</a></p><p>Task attribute pipeline stage that handles Task attribute-specific processing.</p><p><a href="./Belay.Core.Execution.TaskExecutor.html">TaskExecutor</a></p><p>Executor that applies [Task] attribute policies around Python code execution. Handles timeout, caching, and exclusive execution policies.</p><p><a href="./Belay.Core.Execution.TeardownExecutor.html">TeardownExecutor</a></p><p>Executor for methods decorated with the [Teardown] attribute. Applies teardown-specific policies such as ordered cleanup and error handling.</p><p><a href="./Belay.Core.Execution.ThreadAttributePipelineStage.html">ThreadAttributePipelineStage</a></p><p>Thread attribute pipeline stage that handles Thread attribute-specific processing.</p><p><a href="./Belay.Core.Execution.ThreadExecutor.html">ThreadExecutor</a></p><p>Executor for methods decorated with the [Thread] attribute. Applies thread-specific policies such as background execution and lifecycle management.</p><p><a href="./Belay.Core.Execution.ValidationPipelineStage.html">ValidationPipelineStage</a></p><p>Validation pipeline stage that validates method parameters and context.</p><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p><a href="./Belay.Core.Execution.IEnhancedDevice.html">IEnhancedDevice</a></p><p>Enhanced device interface that provides access to advanced execution capabilities. Use this interface when you need the enhanced executor features directly.</p><p><a href="./Belay.Core.Execution.IEnhancedExecutor.html">IEnhancedExecutor</a></p><p>Interface for enhanced executors that can be used with device proxies.</p><p><a href="./Belay.Core.Execution.IExecutionContextService.html">IExecutionContextService</a></p><p>Service for managing method execution context without stack trace inspection. This provides a secure alternative to stack frame reflection.</p><p><a href="./Belay.Core.Execution.IExecutor.html">IExecutor</a></p><p>Interface for method executors that handle attribute-based method execution. Executors intercept method calls and apply attribute-specific policies.</p><p><a href="./Belay.Core.Execution.IMethodExecutionContext.html">IMethodExecutionContext</a></p><p>Provides method execution context without relying on stack trace inspection. This replaces the security-vulnerable stack frame reflection pattern.</p><p><a href="./Belay.Core.Execution.IPipelineStage.html">IPipelineStage</a></p><p>Interface for execution pipeline stages.</p>',63)]))}const x=t(n,[["render",c]]);export{d as __pageData,x as default};
