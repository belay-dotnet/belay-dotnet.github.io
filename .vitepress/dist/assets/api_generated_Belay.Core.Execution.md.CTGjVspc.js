import{_ as i,C as s,c,o as l,ag as n,j as t,a as o,G as r}from"./chunks/framework.CUqMdM43.js";const y=JSON.parse('{"title":"Namespace Belay.Core.Execution","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Execution.md","filePath":"api/generated/Belay.Core.Execution.md"}'),u={name:"api/generated/Belay.Core.Execution.md"};function d(p,e,x,h,f,m){const a=s("xref");return l(),c("div",null,[e[6]||(e[6]=n('<h1 id="namespace-belay-core-execution" tabindex="-1"><a id="Belay_Core_Execution"></a> Namespace Belay.Core.Execution <a class="header-anchor" href="#namespace-belay-core-execution" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Execution&quot;&gt;&lt;/a&gt; Namespace Belay.Core.Execution&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Belay.Core.Execution.BaseExecutor.html">BaseExecutor</a></p><p>Base implementation of IExecutor that provides common functionality for all executor types. Handles Python code generation, parameter conversion, and basic execution flow.</p><p><a href="./Belay.Core.Execution.ExecutionContext.html">ExecutionContext</a></p><p>Represents the execution context for a method call, containing all necessary information for executors to process attribute-decorated methods.</p><p><a href="./Belay.Core.Execution.ExecutionContextService.html">ExecutionContextService</a></p><p>Thread-safe implementation of execution context service using AsyncLocal.</p><p><a href="./Belay.Core.Execution.ExecutorFramework.html">ExecutorFramework</a></p><p>High-level facade for the executor framework that provides a simplified API for executing attribute-decorated methods on MicroPython devices.</p><p><a href="./Belay.Core.Execution.ExecutorManager.html">ExecutorManager</a></p><p>Manages a collection of executors and routes method executions to the appropriate executor. Provides thread-safe executor registration and method dispatching.</p><p><a href="./Belay.Core.Execution.MethodExecutionContext.html">MethodExecutionContext</a></p><p>Implementation of method execution context.</p><p><a href="./Belay.Core.Execution.SetupExecutor.html">SetupExecutor</a></p>',15)),t("p",null,[e[0]||(e[0]=o("Executor for methods decorated with the ",-1)),r(a,{href:"Belay.Attributes.SetupAttribute","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=o(". Handles device initialization methods with order-based execution, critical failure handling, and extended timeouts for hardware initialization.",-1))]),e[7]||(e[7]=t("p",null,[t("a",{href:"./Belay.Core.Execution.TaskExecutor.html"},"TaskExecutor")],-1)),e[8]||(e[8]=t("p",null,"Executor for methods decorated with the TaskAttribute. Handles standard method execution with optional caching and timeout configuration.",-1)),e[9]||(e[9]=t("p",null,[t("a",{href:"./Belay.Core.Execution.TeardownExecutor.html"},"TeardownExecutor")],-1)),t("p",null,[e[2]||(e[2]=o("Executor for methods decorated with the ",-1)),r(a,{href:"Belay.Attributes.TeardownAttribute","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=o(". Handles device cleanup and resource release methods with order-based execution, error handling policies, and emergency shutdown support.",-1))]),e[10]||(e[10]=t("p",null,[t("a",{href:"./Belay.Core.Execution.ThreadExecutor.html"},"ThreadExecutor")],-1)),t("p",null,[e[4]||(e[4]=o("Executor for methods decorated with the ",-1)),r(a,{href:"Belay.Attributes.ThreadAttribute","data-throw-if-not-resolved":"false"}),e[5]||(e[5]=o(". Handles background thread execution on MicroPython devices with lifecycle management, auto-restart capabilities, priority handling, and runtime limits.",-1))]),e[11]||(e[11]=n('<h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p><a href="./Belay.Core.Execution.IExecutionContextService.html">IExecutionContextService</a></p><p>Service for managing method execution context without stack trace inspection. This provides a secure alternative to stack frame reflection.</p><p><a href="./Belay.Core.Execution.IExecutor.html">IExecutor</a></p><p>Represents an executor that can handle specific types of attribute-decorated methods. This interface enables specialized execution strategies for different attribute types (Task, Setup, Thread, Teardown) while maintaining a consistent execution contract.</p><p><a href="./Belay.Core.Execution.IMethodExecutionContext.html">IMethodExecutionContext</a></p><p>Provides method execution context without relying on stack trace inspection. This replaces the security-vulnerable stack frame reflection pattern.</p>',7))])}const C=i(u,[["render",d]]);export{y as __pageData,C as default};
