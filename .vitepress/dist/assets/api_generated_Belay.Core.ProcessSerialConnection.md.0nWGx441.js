import{_ as r,C as o,c as n,o as i,ag as a,j as l,a as s,G as c}from"./chunks/framework.CUqMdM43.js";const y=JSON.parse('{"title":"Class ProcessSerialConnection","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.ProcessSerialConnection.md","filePath":"api/generated/Belay.Core.ProcessSerialConnection.md"}'),p={name:"api/generated/Belay.Core.ProcessSerialConnection.md"};function h(d,e,m,_,C,b){const t=o("xref");return i(),n("div",null,[e[2]||(e[2]=a('<h1 id="class-processserialconnection" tabindex="-1"><a id="Belay_Core_ProcessSerialConnection"></a> Class ProcessSerialConnection <a class="header-anchor" href="#class-processserialconnection" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_ProcessSerialConnection&quot;&gt;&lt;/a&gt; Class ProcessSerialConnection&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><p>Process-based serial connection that uses external processes for I/O like mpremote does. This approach avoids the FileStream blocking issues on Linux serial devices.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessSerialConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDisposable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Belay.Core.ProcessSerialConnection.html">ProcessSerialConnection</a></p><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.idisposable" target="_blank" rel="noreferrer">IDisposable</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><p><a href="./Belay.Core.ProcessSerialConnection.-ctor.html#Belay_Core_ProcessSerialConnection__ctor_System_String_">ProcessSerialConnection(string)</a></p>',12)),l("p",null,[e[0]||(e[0]=s("Initializes a new instance of the ",-1)),c(t,{href:"Belay.Core.ProcessSerialConnection","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=s(" class.",-1))]),e[3]||(e[3]=a('<h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><a href="./Belay.Core.ProcessSerialConnection.IsOpen.html#Belay_Core_ProcessSerialConnection_IsOpen">IsOpen</a></p><p>Gets a value indicating whether the connection is open.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.ProcessSerialConnection.Close.html#Belay_Core_ProcessSerialConnection_Close">Close()</a></p><p>Closes the serial connection.</p><p><a href="./Belay.Core.ProcessSerialConnection.Dispose.html#Belay_Core_ProcessSerialConnection_Dispose">Dispose()</a></p><p>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</p><p><a href="./Belay.Core.ProcessSerialConnection.OpenAsync.html#Belay_Core_ProcessSerialConnection_OpenAsync">OpenAsync()</a></p><p>Opens the serial connection using process-based configuration.</p><p><a href="./Belay.Core.ProcessSerialConnection.ReadWithTimeoutAsync.html#Belay_Core_ProcessSerialConnection_ReadWithTimeoutAsync_System_Int32_">ReadWithTimeoutAsync(int)</a></p><p>Reads available data from the port using timeout-controlled cat.</p><p><a href="./Belay.Core.ProcessSerialConnection.WriteAsync.html#Belay_Core_ProcessSerialConnection_WriteAsync_System_String_">WriteAsync(string)</a></p><p>Writes data to the serial port using echo command.</p>',14))])}const u=r(p,[["render",h]]);export{y as __pageData,u as default};
