import{_ as a,c as i,o as t,ag as p}from"./chunks/framework.CUqMdM43.js";const m=JSON.parse('{"title":"Enum SimpleDeviceFeatureSet","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.SimpleDeviceFeatureSet.md","filePath":"api/generated/Belay.Core.SimpleDeviceFeatureSet.md"}'),o={name:"api/generated/Belay.Core.SimpleDeviceFeatureSet.md"};function s(r,e,c,n,l,d){return t(),i("div",null,e[0]||(e[0]=[p(`<h1 id="enum-simpledevicefeatureset" tabindex="-1"><a id="Belay_Core_SimpleDeviceFeatureSet"></a> Enum SimpleDeviceFeatureSet <a class="header-anchor" href="#enum-simpledevicefeatureset" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_SimpleDeviceFeatureSet&quot;&gt;&lt;/a&gt; Enum SimpleDeviceFeatureSet&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><p>Hardware features that can be detected on MicroPython devices.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleDeviceFeatureSet</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h2><p><code>ADC = 2</code></p><p>Analog to Digital Converter (machine.ADC).</p><p><code>Audio = 16384</code></p><p>Audio capabilities (machine.DAC, etc.).</p><p><code>Bluetooth = 1024</code></p><p>Bluetooth communication (bluetooth module).</p><p><code>CryptoAccel = 2048</code></p><p>Cryptographic acceleration (hashlib, etc.).</p><p><code>Display = 8192</code></p><p>Display capabilities (framebuf, etc.).</p><p><code>FileSystem = 256</code></p><p>File system operations (os module).</p><p><code>GPIO = 1</code></p><p>General Purpose I/O pins (machine.Pin).</p><p><code>I2C = 8</code></p><p>I2C communication interface (machine.I2C).</p><p><code>None = 0</code></p><p>No features detected or supported.</p><p><code>PWM = 4</code></p><p>Pulse Width Modulation (machine.PWM).</p><p><code>RTC = 64</code></p><p>Real-time clock (machine.RTC).</p><p><code>SPI = 16</code></p><p>SPI communication interface (machine.SPI).</p><p><code>Threading = 128</code></p><p>Multi-threading support (_thread module).</p><p><code>Timer = 32</code></p><p>Hardware timers (machine.Timer).</p><p><code>TouchSensor = 4096</code></p><p>Touch sensor capabilities.</p><p><code>WiFi = 512</code></p><p>WiFi networking capabilities (network module).</p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p>This enumeration represents the hardware capabilities that can be detected through import testing on MicroPython devices. The detection is performed in a single batched operation for optimal performance.</p>`,39)]))}const u=a(o,[["render",s]]);export{m as __pageData,u as default};
