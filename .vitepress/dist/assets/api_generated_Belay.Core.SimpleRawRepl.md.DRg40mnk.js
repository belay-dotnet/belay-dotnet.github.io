import{_ as s,C as o,c as l,o as i,ag as a,j as n,a as t,G as p}from"./chunks/framework.CUqMdM43.js";const y=JSON.parse('{"title":"Class SimpleRawRepl","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.SimpleRawRepl.md","filePath":"api/generated/Belay.Core.SimpleRawRepl.md"}'),c={name:"api/generated/Belay.Core.SimpleRawRepl.md"};function m(h,e,d,_,b,f){const r=o("xref");return i(),l("div",null,[e[2]||(e[2]=a('<h1 id="class-simplerawrepl" tabindex="-1"><a id="Belay_Core_SimpleRawRepl"></a> Class SimpleRawRepl <a class="header-anchor" href="#class-simplerawrepl" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_SimpleRawRepl&quot;&gt;&lt;/a&gt; Class SimpleRawRepl&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><p>Simple Raw REPL implementation following official MicroPython mpremote patterns. Direct implementation without complex state management or capability detection.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleRawRepl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDisposable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Belay.Core.SimpleRawRepl.html">SimpleRawRepl</a></p><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.idisposable" target="_blank" rel="noreferrer">IDisposable</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noreferrer">object.MemberwiseClone()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p> This class is designed for use by a single DeviceConnection and is NOT thread-safe. Each DeviceConnection should create and use its own SimpleRawRepl instance exclusively. Concurrent access from multiple threads will result in race conditions and protocol corruption. </p><p> The class maintains internal state (inRawRepl, atPrompt, useRawPaste) that tracks the device&#39;s protocol state. These state variables must be accessed sequentially to ensure protocol integrity and prevent communication errors. </p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><p><a href="./Belay.Core.SimpleRawRepl.-ctor.html#Belay_Core_SimpleRawRepl__ctor_System_IO_Stream_Microsoft_Extensions_Logging_ILogger_">SimpleRawRepl(Stream, ILogger)</a></p>',15)),n("p",null,[e[0]||(e[0]=t("Initializes a new instance of the ",-1)),p(r,{href:"Belay.Core.SimpleRawRepl","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=t(" class.",-1))]),e[3]||(e[3]=a('<h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.SimpleRawRepl.Dispose.html#Belay_Core_SimpleRawRepl_Dispose">Dispose()</a></p><p>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</p><p><a href="./Belay.Core.SimpleRawRepl.EnterRawReplAsync.html#Belay_Core_SimpleRawRepl_EnterRawReplAsync_System_Boolean_System_Int32_System_Threading_CancellationToken_">EnterRawReplAsync(bool, int, CancellationToken)</a></p><p>Enters raw REPL mode with optional soft reset. Based on official mpremote enter_raw_repl implementation.</p><p><a href="./Belay.Core.SimpleRawRepl.ExecuteAsync.html#Belay_Core_SimpleRawRepl_ExecuteAsync_System_String_System_Int32_System_Threading_CancellationToken_">ExecuteAsync(string, int, CancellationToken)</a></p><p>Executes Python code and returns the result. Based on official mpremote exec_raw implementation.</p><p><a href="./Belay.Core.SimpleRawRepl.ExitRawReplAsync.html#Belay_Core_SimpleRawRepl_ExitRawReplAsync_System_Threading_CancellationToken_">ExitRawReplAsync(CancellationToken)</a></p><p>Exits raw REPL mode to friendly REPL. Based on official mpremote exit_raw_repl implementation.</p>',9))])}const u=s(c,[["render",m]]);export{y as __pageData,u as default};
