import{_ as n,C as s,c as o,o as l,ag as i,j as r,a,G as c}from"./chunks/framework.CUqMdM43.js";const C=JSON.parse('{"title":"Method DetectAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.SimplifiedCapabilityDetection.DetectAsync.md","filePath":"api/generated/Belay.Core.SimplifiedCapabilityDetection.DetectAsync.md"}'),p={name:"api/generated/Belay.Core.SimplifiedCapabilityDetection.DetectAsync.md"};function h(d,e,g,k,_,y){const t=s("xref");return l(),o("div",null,[e[2]||(e[2]=i('<h1 id="method-detectasync" tabindex="-1"><a id="Belay_Core_SimplifiedCapabilityDetection_DetectAsync_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_System_Threading_CancellationToken_"></a> Method DetectAsync <a class="header-anchor" href="#method-detectasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_SimplifiedCapabilityDetection_DetectAsync_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; Method DetectAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.html">Belay.Core</a><br> Assembly: Belay.Core.dll</p><h2 id="detectasync-deviceconnection-ilogger-cancellationtoken" tabindex="-1"><a id="Belay_Core_SimplifiedCapabilityDetection_DetectAsync_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_System_Threading_CancellationToken_"></a> DetectAsync(DeviceConnection, ILogger?, CancellationToken) <a class="header-anchor" href="#detectasync-deviceconnection-ilogger-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_SimplifiedCapabilityDetection_DetectAsync_Belay_Core_DeviceConnection_Microsoft_Extensions_Logging_ILogger_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; DetectAsync\\(DeviceConnection, ILogger?, CancellationToken\\)&quot;">​</a></h2><p>Detects device capabilities using a single batched Python script execution.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SimpleDeviceCapabilities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DetectAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeviceConnection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ILogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>connection</code> <a href="./Belay.Core.DeviceConnection.html">DeviceConnection</a></p><p><code>logger</code> <a href="https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger" target="_blank" rel="noreferrer">ILogger</a>?</p><p>Optional logger for diagnostic output.</p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><p>Cancellation token for the operation.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;<a href="./Belay.Core.SimpleDeviceCapabilities.html">SimpleDeviceCapabilities</a>&gt;</p>',13)),r("p",null,[e[0]||(e[0]=a("A ",-1)),c(t,{href:"System.Threading.Tasks.Task%601","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a(" containing the detected capabilities.",-1))]),e[3]||(e[3]=i(`<h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><pre><code class="lang-csharp">var capabilities = await SimplifiedCapabilityDetection.DetectAsync(
    communication, logger, cancellationToken);

Console.WriteLine($&quot;Platform: {capabilities.Platform}&quot;);
Console.WriteLine($&quot;Features: {capabilities.SupportedFeatures}&quot;);
Console.WriteLine($&quot;Memory: {capabilities.AvailableMemory} bytes&quot;);</code></pre><h3 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>Thrown when communication is null.</p><p><a href="./Belay.Core.DeviceException.html">DeviceException</a></p><p>Thrown when the device is not connected.</p>`,7))])}const u=n(p,[["render",h]]);export{C as __pageData,u as default};
