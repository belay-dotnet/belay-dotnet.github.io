import{_ as t,C as i,c as r,o as n,ag as o,j as l,a,G as p}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"Method IsMicroPythonAvailableAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Testing.SubprocessTestHelper.IsMicroPythonAvailableAsync.md","filePath":"api/generated/Belay.Core.Testing.SubprocessTestHelper.IsMicroPythonAvailableAsync.md"}'),h={name:"api/generated/Belay.Core.Testing.SubprocessTestHelper.IsMicroPythonAvailableAsync.md"};function c(d,e,y,b,g,k){const s=i("xref");return n(),r("div",null,[e[2]||(e[2]=o('<h1 id="method-ismicropythonavailableasync" tabindex="-1"><a id="Belay_Core_Testing_SubprocessTestHelper_IsMicroPythonAvailableAsync"></a> Method IsMicroPythonAvailableAsync <a class="header-anchor" href="#method-ismicropythonavailableasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Testing_SubprocessTestHelper_IsMicroPythonAvailableAsync&quot;&gt;&lt;/a&gt; Method IsMicroPythonAvailableAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Testing.html">Belay.Core.Testing</a><br> Assembly: Belay.Core.dll</p><h2 id="ismicropythonavailableasync" tabindex="-1"><a id="Belay_Core_Testing_SubprocessTestHelper_IsMicroPythonAvailableAsync"></a> IsMicroPythonAvailableAsync() <a class="header-anchor" href="#ismicropythonavailableasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Testing_SubprocessTestHelper_IsMicroPythonAvailableAsync&quot;&gt;&lt;/a&gt; IsMicroPythonAvailableAsync\\(\\)&quot;">​</a></h2><p>Check if MicroPython unix port is available for testing.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsMicroPythonAvailableAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a>&gt;</p>',7)),l("p",null,[e[0]||(e[0]=a("A ",-1)),p(s,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a(" representing the asynchronous operation.",-1))])])}const m=t(h,[["render",c]]);export{u as __pageData,m as default};
