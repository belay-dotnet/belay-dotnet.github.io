import{_ as e,c as n,o as t,ag as i}from"./chunks/framework.CUqMdM43.js";const d=JSON.parse('{"title":"Interface IDeviceTransaction","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Core.Transactions.IDeviceTransaction.md","filePath":"api/generated/Belay.Core.Transactions.IDeviceTransaction.md"}'),s={name:"api/generated/Belay.Core.Transactions.IDeviceTransaction.md"};function r(o,a,c,l,p,h){return t(),n("div",null,a[0]||(a[0]=[i('<h1 id="interface-idevicetransaction" tabindex="-1"><a id="Belay_Core_Transactions_IDeviceTransaction"></a> Interface IDeviceTransaction <a class="header-anchor" href="#interface-idevicetransaction" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Core_Transactions_IDeviceTransaction&quot;&gt;&lt;/a&gt; Interface IDeviceTransaction&quot;">​</a></h1><p>Namespace: <a href="./Belay.Core.Transactions.html">Belay.Core.Transactions</a><br> Assembly: Belay.Core.dll</p><p>Represents a transaction boundary for device operations that ensures consistency across multiple operations.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IDeviceTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDisposable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.idisposable" target="_blank" rel="noreferrer">IDisposable</a></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p><a href="./Belay.Core.Transactions.IDeviceTransaction.IsActive.html#Belay_Core_Transactions_IDeviceTransaction_IsActive">IsActive</a></p><p>Gets a value indicating whether the transaction is still active.</p><p><a href="./Belay.Core.Transactions.IDeviceTransaction.TransactionId.html#Belay_Core_Transactions_IDeviceTransaction_TransactionId">TransactionId</a></p><p>Gets the unique transaction identifier.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p><a href="./Belay.Core.Transactions.IDeviceTransaction.CommitAsync.html#Belay_Core_Transactions_IDeviceTransaction_CommitAsync_System_Threading_CancellationToken_">CommitAsync(CancellationToken)</a></p><p>Commits all operations in this transaction.</p><p><a href="./Belay.Core.Transactions.IDeviceTransaction.RegisterCompensatingAction.html#Belay_Core_Transactions_IDeviceTransaction_RegisterCompensatingAction_System_Func_System_Threading_CancellationToken_System_Threading_Tasks_Task__System_String_">RegisterCompensatingAction(Func&lt;CancellationToken, Task&gt;, string)</a></p><p>Registers a compensating action to be executed if the transaction is rolled back.</p><p><a href="./Belay.Core.Transactions.IDeviceTransaction.RollbackAsync.html#Belay_Core_Transactions_IDeviceTransaction_RollbackAsync_System_Threading_CancellationToken_">RollbackAsync(CancellationToken)</a></p><p>Rolls back all operations in this transaction by executing compensating actions.</p>',18)]))}const m=e(s,[["render",r]]);export{d as __pageData,m as default};
