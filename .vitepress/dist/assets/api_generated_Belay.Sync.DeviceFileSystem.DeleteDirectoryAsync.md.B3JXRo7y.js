import{_ as o,C as t,c as l,o as c,ag as a,G as s,w as h,a as i}from"./chunks/framework.CUqMdM43.js";const f=JSON.parse('{"title":"Method DeleteDirectoryAsync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Sync.DeviceFileSystem.DeleteDirectoryAsync.md","filePath":"api/generated/Belay.Sync.DeviceFileSystem.DeleteDirectoryAsync.md"}'),p={name:"api/generated/Belay.Sync.DeviceFileSystem.DeleteDirectoryAsync.md"};function d(y,e,k,_,m,g){const n=t("xref"),r=t("placeholder");return c(),l("div",null,[e[2]||(e[2]=a('<h1 id="method-deletedirectoryasync" tabindex="-1"><a id="Belay_Sync_DeviceFileSystem_DeleteDirectoryAsync_System_String_System_Boolean_System_Threading_CancellationToken_"></a> Method DeleteDirectoryAsync <a class="header-anchor" href="#method-deletedirectoryasync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Sync_DeviceFileSystem_DeleteDirectoryAsync_System_String_System_Boolean_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; Method DeleteDirectoryAsync&quot;">​</a></h1><p>Namespace: <a href="./Belay.Sync.html">Belay.Sync</a><br> Assembly: Belay.Sync.dll</p><h2 id="deletedirectoryasync-string-bool-cancellationtoken" tabindex="-1"><a id="Belay_Sync_DeviceFileSystem_DeleteDirectoryAsync_System_String_System_Boolean_System_Threading_CancellationToken_"></a> DeleteDirectoryAsync(string, bool, CancellationToken) <a class="header-anchor" href="#deletedirectoryasync-string-bool-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Sync_DeviceFileSystem_DeleteDirectoryAsync_System_String_System_Boolean_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; DeleteDirectoryAsync\\(string, bool, CancellationToken\\)&quot;">​</a></h2><p>Deletes a directory from the device.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeleteDirectoryAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p><code>path</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>The directory path to delete.</p><p><code>recursive</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>Whether to delete the directory and all its contents.</p><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><p>Cancellation token to cancel the operation.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noreferrer">Task</a></p>',14)),s(r,null,{default:h(()=>[e[0]||(e[0]=i("A ",-1)),s(n,{href:"System.Threading.Tasks.Task","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=i(" representing the asynchronous operation.",-1))]),_:1,__:[0,1]}),e[3]||(e[3]=a('<h3 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h3><p><a href="https://learn.microsoft.com/dotnet/api/system.io.directorynotfoundexception" target="_blank" rel="noreferrer">DirectoryNotFoundException</a></p><p>Thrown when the directory does not exist.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.unauthorizedaccessexception" target="_blank" rel="noreferrer">UnauthorizedAccessException</a></p><p>Thrown when access is denied.</p><p><a href="https://learn.microsoft.com/dotnet/api/system.io.ioexception" target="_blank" rel="noreferrer">IOException</a></p><p>Thrown when the directory is not empty and recursive is false.</p>',7))])}const u=o(p,[["render",d]]);export{f as __pageData,u as default};
