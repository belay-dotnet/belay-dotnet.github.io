import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.CUqMdM43.js";const d=JSON.parse('{"title":"Namespace Belay.Sync","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Sync.md","filePath":"api/generated/Belay.Sync.md"}'),n={name:"api/generated/Belay.Sync.md"};function c(r,e,o,l,p,y){return i(),t("div",null,e[0]||(e[0]=[s('<h1 id="namespace-belay-sync" tabindex="-1"><a id="Belay_Sync"></a> Namespace Belay.Sync <a class="header-anchor" href="#namespace-belay-sync" aria-label="Permalink to &quot;&lt;a id=&quot;Belay_Sync&quot;&gt;&lt;/a&gt; Namespace Belay.Sync&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Belay.Sync.DeviceExtensions.html">DeviceExtensions</a></p><p>Extension methods to add file system support to Device instances. This approach avoids circular dependencies between Belay.Core and Belay.Sync.</p><p><a href="./Belay.Sync.DeviceFileInfo.html">DeviceFileInfo</a></p><p>Represents information about a file or directory on the device.</p><p><a href="./Belay.Sync.DeviceFileSystem.html">DeviceFileSystem</a></p><p>Implements file system operations for MicroPython/CircuitPython devices.</p><p><a href="./Belay.Sync.DevicePathUtil.html">DevicePathUtil</a></p><p>Provides utilities for handling device file paths in a cross-platform manner. MicroPython/CircuitPython devices use Unix-style paths regardless of the host OS.</p><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p><a href="./Belay.Sync.IDeviceFileSystem.html">IDeviceFileSystem</a></p><p>Provides an abstraction for file system operations on MicroPython/CircuitPython devices.</p>',13)]))}const m=a(n,[["render",c]]);export{d as __pageData,m as default};
