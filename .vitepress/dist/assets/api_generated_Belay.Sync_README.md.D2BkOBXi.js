import{_ as t,c as o,o as i,ag as n}from"./chunks/framework.CUqMdM43.js";const m=JSON.parse('{"title":"Belay.Sync API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api/generated/Belay.Sync/README.md","filePath":"api/generated/Belay.Sync/README.md"}'),a={name:"api/generated/Belay.Sync/README.md"};function l(c,e,s,r,p,h){return i(),o("div",null,e[0]||(e[0]=[n('<h1 id="belay-sync-api-reference" tabindex="-1">Belay.Sync API Reference <a class="header-anchor" href="#belay-sync-api-reference" aria-label="Permalink to &quot;Belay.Sync API Reference&quot;">​</a></h1><p>Comprehensive API documentation generated from XML documentation comments.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><h3 id="belay-sync" tabindex="-1">Belay.Sync <a class="header-anchor" href="#belay-sync" aria-label="Permalink to &quot;Belay.Sync&quot;">​</a></h3><ul><li><a href="#belaysyncdeviceextensions">DeviceExtensions</a></li><li><a href="#belaysyncdevicefileinfo">DeviceFileInfo</a></li><li><a href="#belaysyncdevicefilesystem">DeviceFileSystem</a></li><li><a href="#belaysyncdevicepathutil">DevicePathUtil</a></li><li><a href="#belaysyncidevicefilesystem">IDeviceFileSystem</a></li></ul><hr><h2 id="belay-sync-1" tabindex="-1">Belay.Sync <a class="header-anchor" href="#belay-sync-1" aria-label="Permalink to &quot;Belay.Sync&quot;">​</a></h2><h3 id="belaysyncdeviceextensions" tabindex="-1">Belay.Sync.DeviceExtensions <a class="header-anchor" href="#belaysyncdeviceextensions" aria-label="Permalink to &quot;Belay.Sync.DeviceExtensions {#belaysyncdeviceextensions}&quot;">​</a></h3><p>Extension methods to add file system support to Device instances. This approach avoids circular dependencies between Belay.Core and Belay.Sync.</p><h4 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h4><p><strong>Device)</strong></p><p>Gets a DeviceFileSystem instance for the specified device with lazy initialization. This is the recommended approach for performance-sensitive scenarios.</p><p><em>Parameters</em>:</p><ul><li><code>device</code>: The device to get file system support for.</li></ul><p><em>Returns</em>: A DeviceFileSystem instance for the device.</p><p><strong>DeviceFileSystem})</strong></p><p>Gets or creates a DeviceFileSystem instance for the specified device.</p><p><em>Parameters</em>:</p><ul><li><code>device</code>: The device to get file system support for.</li><li><code>logger</code>: Optional logger for file system operations.</li></ul><p><em>Returns</em>: A DeviceFileSystem instance for the device.</p><hr><h3 id="belaysyncdevicefileinfo" tabindex="-1">Belay.Sync.DeviceFileInfo <a class="header-anchor" href="#belaysyncdevicefileinfo" aria-label="Permalink to &quot;Belay.Sync.DeviceFileInfo {#belaysyncdevicefileinfo}&quot;">​</a></h3><p>Represents information about a file or directory on the device.</p><h4 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h4><p><strong>Checksum</strong></p><p>Gets the checksum of the file content. May be null if not computed.</p><p><strong>IsDirectory</strong></p><p>Gets a value indicating whether this entry is a directory.</p><p><strong>LastModified</strong></p><p>Gets the last modified timestamp. May be null if not supported by the device.</p><p><strong>Path</strong></p><p>Gets the full path of the file or directory.</p><p><strong>Size</strong></p><p>Gets the size of the file in bytes. Null for directories.</p><hr><h3 id="belaysyncdevicefilesystem" tabindex="-1">Belay.Sync.DeviceFileSystem <a class="header-anchor" href="#belaysyncdevicefilesystem" aria-label="Permalink to &quot;Belay.Sync.DeviceFileSystem {#belaysyncdevicefilesystem}&quot;">​</a></h3><p>Implements file system operations for MicroPython/CircuitPython devices.</p><h4 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h4><p><strong>DeviceFileSystem})</strong></p><p>Initializes a new instance of the</p><p><em>Parameters</em>:</p><ul><li><code>device</code>: The device to perform file system operations on.</li><li><code>logger</code>: Optional logger for diagnostic information.</li></ul><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><p><strong>CancellationToken)</strong></p><hr><h3 id="belaysyncdevicepathutil" tabindex="-1">Belay.Sync.DevicePathUtil <a class="header-anchor" href="#belaysyncdevicepathutil" aria-label="Permalink to &quot;Belay.Sync.DevicePathUtil {#belaysyncdevicepathutil}&quot;">​</a></h3><p>Provides utilities for handling device file paths in a cross-platform manner. MicroPython/CircuitPython devices use Unix-style paths regardless of the host OS.</p><h4 id="methods-2" tabindex="-1">Methods <a class="header-anchor" href="#methods-2" aria-label="Permalink to &quot;Methods&quot;">​</a></h4><p><strong>String[])</strong></p><p>Combines multiple path segments into a single device path.</p><p><em>Parameters</em>:</p><ul><li><code>paths</code>: The path segments to combine.</li></ul><p><em>Returns</em>: The combined device path.</p><p><em>Exceptions</em>:</p><ul><li><code>System.ArgumentException</code>: Thrown when any path segment is invalid.</li></ul><p><strong>String)</strong></p><p>Converts a host file system path to a device path format.</p><p><em>Parameters</em>:</p><ul><li><code>hostPath</code>: The host file system path.</li><li><code>baseHostPath</code>: The base host directory to make the path relative to.</li></ul><p><em>Returns</em>: The equivalent device path.</p><p><strong>String)</strong></p><p>Gets the directory name of the specified path.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to get the directory name for.</li></ul><p><em>Returns</em>: The directory name, or &quot;/&quot; for the root directory.</p><p><strong>String)</strong></p><p>Gets the extension of the specified path.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to get the extension from.</li></ul><p><em>Returns</em>: The file extension including the dot, or empty string if no extension.</p><p><strong>String)</strong></p><p>Gets the file name from the specified path.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to get the file name from.</li></ul><p><em>Returns</em>: The file name, or empty string for the root directory.</p><p><strong>String)</strong></p><p>Gets the file name without its extension.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to get the file name from.</li></ul><p><em>Returns</em>: The file name without extension.</p><p><strong>String)</strong></p><p>Determines if the specified path is under the given parent directory.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to check.</li><li><code>parentDirectory</code>: The parent directory path.</li></ul><p><em>Returns</em>: True if the path is under the parent directory, false otherwise.</p><p><strong>String)</strong></p><p>Determines whether the specified path is a valid device path.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to validate.</li></ul><p><em>Returns</em>: True if the path is valid, false otherwise.</p><p><strong>String)</strong></p><p>Normalizes a device path by ensuring it uses forward slashes and removing redundant separators.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to normalize.</li></ul><p><em>Returns</em>: The normalized device path.</p><p><em>Exceptions</em>:</p><ul><li><code>System.ArgumentException</code>: Thrown when the path is invalid.</li></ul><p><strong>String)</strong></p><p>Converts a device path to a host file system path format.</p><p><em>Parameters</em>:</p><ul><li><code>devicePath</code>: The device path.</li><li><code>baseHostPath</code>: The base host directory to combine with the device path.</li></ul><p><em>Returns</em>: The equivalent host file system path.</p><p><strong>String)</strong></p><p>Validates that the specified path contains only valid characters for device file systems.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to validate.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.ArgumentException</code>: Thrown when the path contains invalid characters.</li></ul><h4 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h4><p><strong>DeviceRoot</strong></p><p>The root directory path on devices.</p><p><strong>DeviceSeparator</strong></p><p>The path separator used on MicroPython/CircuitPython devices (always forward slash).</p><hr><h3 id="belaysyncidevicefilesystem" tabindex="-1">Belay.Sync.IDeviceFileSystem <a class="header-anchor" href="#belaysyncidevicefilesystem" aria-label="Permalink to &quot;Belay.Sync.IDeviceFileSystem {#belaysyncidevicefilesystem}&quot;">​</a></h3><p>Provides an abstraction for file system operations on MicroPython/CircuitPython devices.</p><h4 id="methods-3" tabindex="-1">Methods <a class="header-anchor" href="#methods-3" aria-label="Permalink to &quot;Methods&quot;">​</a></h4><p><strong>CancellationToken)</strong></p><p>Calculates a checksum for the specified file.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to calculate checksum for.</li><li><code>algorithm</code>: The checksum algorithm to use (e.g., &quot;md5&quot;, &quot;sha256&quot;).</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: The hexadecimal checksum string.</p><p><em>Exceptions</em>:</p><ul><li><code>System.IO.FileNotFoundException</code>: Thrown when the file does not exist.</li><li><code>System.NotSupportedException</code>: Thrown when the algorithm is not supported.</li></ul><p><strong>CancellationToken)</strong></p><p>Creates a directory on the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The directory path to create.</li><li><code>recursive</code>: Whether to create parent directories if they don&#39;t exist.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li><li><code>System.IO.IOException</code>: Thrown when an I/O error occurs.</li></ul><p><strong>CancellationToken)</strong></p><p>Deletes a directory from the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The directory path to delete.</li><li><code>recursive</code>: Whether to delete the directory and all its contents.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.IO.DirectoryNotFoundException</code>: Thrown when the directory does not exist.</li><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li><li><code>System.IO.IOException</code>: Thrown when the directory is not empty and recursive is false.</li></ul><p><strong>CancellationToken)</strong></p><p>Deletes a file from the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to delete.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.IO.FileNotFoundException</code>: Thrown when the file does not exist.</li><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li></ul><p><strong>CancellationToken)</strong></p><p>Checks whether a file or directory exists on the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to check.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: True if the path exists, false otherwise.</p><p><strong>CancellationToken)</strong></p><p>Gets information about a specific file or directory on the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The path to examine.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: File information, or null if the path does not exist.</p><p><strong>CancellationToken)</strong></p><p>Lists the contents of a directory on the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The directory path to list. Use &quot;/&quot; for root directory.</li><li><code>recursive</code>: Whether to list contents recursively.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: A collection of file and directory information.</p><p><em>Exceptions</em>:</p><ul><li><code>System.IO.DirectoryNotFoundException</code>: Thrown when the directory does not exist.</li><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li></ul><p><strong>CancellationToken)</strong></p><p>Reads the entire contents of a file from the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to read.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: The file contents as a byte array.</p><p><em>Exceptions</em>:</p><ul><li><code>System.IO.FileNotFoundException</code>: Thrown when the file does not exist.</li><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li></ul><p><strong>CancellationToken)</strong></p><p>Reads the entire contents of a text file from the device.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to read.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Returns</em>: The file contents as a string.</p><p><em>Exceptions</em>:</p><ul><li><code>System.IO.FileNotFoundException</code>: Thrown when the file does not exist.</li><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li></ul><p><strong>CancellationToken)</strong></p><p>Writes data to a file on the device, creating it if necessary.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to write to.</li><li><code>content</code>: The content to write.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li><li><code>System.IO.IOException</code>: Thrown when an I/O error occurs.</li></ul><p><strong>CancellationToken)</strong></p><p>Writes text to a file on the device, creating it if necessary.</p><p><em>Parameters</em>:</p><ul><li><code>path</code>: The file path to write to.</li><li><code>content</code>: The text content to write.</li><li><code>cancellationToken</code>: Cancellation token to cancel the operation.</li></ul><p><em>Exceptions</em>:</p><ul><li><code>System.UnauthorizedAccessException</code>: Thrown when access is denied.</li><li><code>System.IO.IOException</code>: Thrown when an I/O error occurs.</li></ul><hr>',195)]))}const u=t(a,[["render",l]]);export{m as __pageData,u as default};
