import{_ as e,c as i,o as s,ag as n}from"./chunks/framework.CUqMdM43.js";const u=JSON.parse('{"title":"What is Belay.NET?","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md"}'),t={name:"guide/introduction.md"};function r(o,a,l,p,h,c){return s(),i("div",null,a[0]||(a[0]=[n(`<h1 id="what-is-belay-net" tabindex="-1">What is Belay.NET? <a class="header-anchor" href="#what-is-belay-net" aria-label="Permalink to &quot;What is Belay.NET?&quot;">​</a></h1><p>Belay.NET is a C# library that enables seamless integration between .NET applications and MicroPython/CircuitPython devices. It allows you to treat MicroPython devices as off-the-shelf hardware components in your .NET applications.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><h3 id="🚀-zero-friction-integration" tabindex="-1">🚀 <strong>Zero Friction Integration</strong> <a class="header-anchor" href="#🚀-zero-friction-integration" aria-label="Permalink to &quot;🚀 **Zero Friction Integration**&quot;">​</a></h3><p>Write C# methods that execute on MicroPython devices as if they were local functions.</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    import machine</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    adc = machine.ADC(0)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    return adc.read() &gt; 512</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isHigh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Executes on device!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="🔄-async-first-architecture" tabindex="-1">🔄 <strong>Async-First Architecture</strong> <a class="header-anchor" href="#🔄-async-first-architecture" aria-label="Permalink to &quot;🔄 **Async-First Architecture**&quot;">​</a></h3><p>Built from the ground up with async/await patterns for responsive applications.</p><h3 id="🏗️-enterprise-ready" tabindex="-1">🏗️ <strong>Enterprise Ready</strong> <a class="header-anchor" href="#🏗️-enterprise-ready" aria-label="Permalink to &quot;🏗️ **Enterprise Ready**&quot;">​</a></h3><ul><li>Full dependency injection support</li><li>Structured logging integration</li><li>Health monitoring</li><li>Configuration management</li><li>Comprehensive error handling</li></ul><h3 id="🎯-strongly-typed" tabindex="-1">🎯 <strong>Strongly Typed</strong> <a class="header-anchor" href="#🎯-strongly-typed" aria-label="Permalink to &quot;🎯 **Strongly Typed**&quot;">​</a></h3><p>Compile-time type safety with generic return types and automatic JSON serialization.</p><h3 id="🔌-multiple-connection-types" tabindex="-1">🔌 <strong>Multiple Connection Types</strong> <a class="header-anchor" href="#🔌-multiple-connection-types" aria-label="Permalink to &quot;🔌 **Multiple Connection Types**&quot;">​</a></h3><ul><li>USB Serial (recommended)</li><li>WebREPL for wireless connections</li><li>Subprocess for testing and development</li></ul><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><h3 id="iot-applications" tabindex="-1">IoT Applications <a class="header-anchor" href="#iot-applications" aria-label="Permalink to &quot;IoT Applications&quot;">​</a></h3><p>Control sensors, actuators, and displays from .NET applications.</p><h3 id="home-automation" tabindex="-1">Home Automation <a class="header-anchor" href="#home-automation" aria-label="Permalink to &quot;Home Automation&quot;">​</a></h3><p>Integrate MicroPython devices into home automation systems built with .NET.</p><h3 id="industrial-control" tabindex="-1">Industrial Control <a class="header-anchor" href="#industrial-control" aria-label="Permalink to &quot;Industrial Control&quot;">​</a></h3><p>Monitor and control industrial equipment using MicroPython devices.</p><h3 id="educational-projects" tabindex="-1">Educational Projects <a class="header-anchor" href="#educational-projects" aria-label="Permalink to &quot;Educational Projects&quot;">​</a></h3><p>Teach embedded programming concepts using familiar .NET tools.</p><h3 id="prototyping" tabindex="-1">Prototyping <a class="header-anchor" href="#prototyping" aria-label="Permalink to &quot;Prototyping&quot;">​</a></h3><p>Rapidly prototype IoT solutions by combining .NET business logic with MicroPython hardware control.</p><h2 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐</span></span>
<span class="line"><span>│   .NET App      │    │   Belay.NET     │    │  MicroPython    │</span></span>
<span class="line"><span>│                 │    │                 │    │     Device      │</span></span>
<span class="line"><span>│  ┌───────────┐  │    │  ┌───────────┐  │    │  ┌───────────┐  │</span></span>
<span class="line"><span>│  │ Business  │  │    │  │   Device  │  │    │  │  Python   │  │</span></span>
<span class="line"><span>│  │  Logic    │◄─┼────┼─►│   Proxy   │◄─┼────┼─►│   Code    │  │</span></span>
<span class="line"><span>│  └───────────┘  │    │  └───────────┘  │    │  └───────────┘  │</span></span>
<span class="line"><span>└─────────────────┘    └─────────────────┘    └─────────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="why-belay-net" tabindex="-1">Why Belay.NET? <a class="header-anchor" href="#why-belay-net" aria-label="Permalink to &quot;Why Belay.NET?&quot;">​</a></h2><h3 id="familiar-development-experience" tabindex="-1"><strong>Familiar Development Experience</strong> <a class="header-anchor" href="#familiar-development-experience" aria-label="Permalink to &quot;**Familiar Development Experience**&quot;">​</a></h3><p>Write device code using C# methods and attributes. No need to learn new tools or deployment processes.</p><h3 id="reliable-communication" tabindex="-1"><strong>Reliable Communication</strong> <a class="header-anchor" href="#reliable-communication" aria-label="Permalink to &quot;**Reliable Communication**&quot;">​</a></h3><p>Robust protocol handling with automatic error recovery and connection management.</p><h3 id="production-ready" tabindex="-1"><strong>Production Ready</strong> <a class="header-anchor" href="#production-ready" aria-label="Permalink to &quot;**Production Ready**&quot;">​</a></h3><p>Built with enterprise patterns: dependency injection, logging, configuration, and health monitoring.</p><h3 id="cross-platform" tabindex="-1"><strong>Cross-Platform</strong> <a class="header-anchor" href="#cross-platform" aria-label="Permalink to &quot;**Cross-Platform**&quot;">​</a></h3><p>Works on Windows, macOS, and Linux with .NET 6+.</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>Ready to start? Check out our <a href="/guide/getting-started.html">Getting Started Guide</a> to build your first Belay.NET application in minutes.</p>`,38)]))}const m=e(t,[["render",r]]);export{u as __pageData,m as default};
