import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.CUqMdM43.js";const c=JSON.parse('{"title":"CircuitPython Device Support","description":"","frontmatter":{},"headers":[],"relativePath":"hardware/circuitpython.md","filePath":"hardware/circuitpython.md"}'),l={name:"hardware/circuitpython.md"};function e(r,s,p,h,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="circuitpython-device-support" tabindex="-1">CircuitPython Device Support <a class="header-anchor" href="#circuitpython-device-support" aria-label="Permalink to &quot;CircuitPython Device Support&quot;">‚Äã</a></h1><div class="warning custom-block"><p class="custom-block-title">Documentation in Progress</p><p>This documentation is currently being developed. CircuitPython support is in beta with core functionality implemented.</p><p><strong>Status</strong>: üß™ Beta support, üìù Documentation in progress<br><strong>Expected completion</strong>: After CircuitPython validation testing</p></div><h2 id="coming-soon" tabindex="-1">Coming Soon <a class="header-anchor" href="#coming-soon" aria-label="Permalink to &quot;Coming Soon&quot;">‚Äã</a></h2><p>This page will provide setup and usage guidance for CircuitPython devices, including:</p><ul><li><strong>Supported Boards</strong>: Adafruit and community CircuitPython boards</li><li><strong>Firmware Installation</strong>: CircuitPython firmware installation process</li><li><strong>Library Management</strong>: Installing and managing CircuitPython libraries</li><li><strong>Pin Compatibility</strong>: CircuitPython vs MicroPython pin differences</li><li><strong>Feature Limitations</strong>: Known limitations and workarounds</li><li><strong>Adafruit Ecosystem</strong>: Integration with Adafruit learning guides</li><li><strong>Performance Considerations</strong>: CircuitPython-specific optimizations</li></ul><h2 id="current-beta-status" tabindex="-1">Current Beta Status <a class="header-anchor" href="#current-beta-status" aria-label="Permalink to &quot;Current Beta Status&quot;">‚Äã</a></h2><p>CircuitPython devices work with Belay.NET using the same Raw REPL protocol as MicroPython, but there are some differences:</p><h3 id="‚úÖ-working-features" tabindex="-1">‚úÖ Working Features <a class="header-anchor" href="#‚úÖ-working-features" aria-label="Permalink to &quot;‚úÖ Working Features&quot;">‚Äã</a></h3><ul><li>Basic device connection and communication</li><li>Code execution via Raw REPL protocol</li><li>File transfer capabilities</li><li>Most attribute-based programming patterns</li></ul><h3 id="üîÑ-limitations-beta" tabindex="-1">üîÑ Limitations (Beta) <a class="header-anchor" href="#üîÑ-limitations-beta" aria-label="Permalink to &quot;üîÑ Limitations (Beta)&quot;">‚Äã</a></h3><ul><li>Some MicroPython-specific modules not available</li><li>Different pin naming conventions</li><li>Library compatibility differences</li><li>Performance variations</li></ul><h2 id="quick-start-preview" tabindex="-1">Quick Start Preview <a class="header-anchor" href="#quick-start-preview" aria-label="Permalink to &quot;Quick Start Preview&quot;">‚Äã</a></h2><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example of what&#39;s coming - CircuitPython device control</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CircuitPythonController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Device</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitializeCircuitPythonAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import board</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import digitalio</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import analogio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Built-in LED (varies by board)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">led = digitalio.DigitalInOut(board.LED)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">led.direction = digitalio.Direction.OUTPUT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Analog input</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">analog_in = analogio.AnalogIn(board.A0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Digital input with pull-up</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">button = digitalio.DigitalInOut(board.BUTTON)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">button.direction = digitalio.Direction.INPUT</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">button.pull = digitalio.Pull.UP</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetLedAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;led.value = {(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;True&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;False&quot;)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadButtonAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;not button.value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Inverted for pull-up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadAnalogAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;analog_in.value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadAnalogVoltageAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;analog_in.value * 3.3 / 65536&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromConnectionString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;serial:COM3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConnectAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CircuitPythonController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitializeCircuitPythonAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Control LED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetLedAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetLedAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Read sensors</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> analogValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadAnalogAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> voltage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadAnalogVoltageAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Analog: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">analogValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Voltage: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">voltage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">F2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h2 id="popular-circuitpython-boards" tabindex="-1">Popular CircuitPython Boards <a class="header-anchor" href="#popular-circuitpython-boards" aria-label="Permalink to &quot;Popular CircuitPython Boards&quot;">‚Äã</a></h2><h3 id="adafruit-feather-series" tabindex="-1">Adafruit Feather Series <a class="header-anchor" href="#adafruit-feather-series" aria-label="Permalink to &quot;Adafruit Feather Series&quot;">‚Äã</a></h3><ul><li><strong>Feather M4 Express</strong>: SAMD51 @ 120MHz</li><li><strong>Feather ESP32-S2</strong>: WiFi-enabled with native USB</li><li><strong>Feather RP2040</strong>: Raspberry Pi RP2040 chip</li></ul><h3 id="adafruit-itsybitsy-series" tabindex="-1">Adafruit ItsyBitsy Series <a class="header-anchor" href="#adafruit-itsybitsy-series" aria-label="Permalink to &quot;Adafruit ItsyBitsy Series&quot;">‚Äã</a></h3><ul><li><strong>ItsyBitsy M4</strong>: Compact SAMD51 board</li><li><strong>ItsyBitsy RP2040</strong>: Tiny RP2040 board</li></ul><h3 id="raspberry-pi-pico" tabindex="-1">Raspberry Pi Pico <a class="header-anchor" href="#raspberry-pi-pico" aria-label="Permalink to &quot;Raspberry Pi Pico&quot;">‚Äã</a></h3><ul><li><strong>CircuitPython Support</strong>: Alternative firmware to MicroPython</li><li><strong>Pin Compatibility</strong>: Same hardware, different software approach</li></ul><h2 id="key-differences-from-micropython" tabindex="-1">Key Differences from MicroPython <a class="header-anchor" href="#key-differences-from-micropython" aria-label="Permalink to &quot;Key Differences from MicroPython&quot;">‚Äã</a></h2><h3 id="pin-naming" tabindex="-1">Pin Naming <a class="header-anchor" href="#pin-naming" aria-label="Permalink to &quot;Pin Naming&quot;">‚Äã</a></h3><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MicroPython style</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;from machine import Pin; led = Pin(25, Pin.OUT)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CircuitPython style</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import board, digitalio; led = digitalio.DigitalInOut(board.LED)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="library-structure" tabindex="-1">Library Structure <a class="header-anchor" href="#library-structure" aria-label="Permalink to &quot;Library Structure&quot;">‚Äã</a></h3><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MicroPython</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;from machine import ADC, Pin; adc = ADC(Pin(26))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CircuitPython</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import board, analogio; adc = analogio.AnalogIn(board.A0)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="module-availability" tabindex="-1">Module Availability <a class="header-anchor" href="#module-availability" aria-label="Permalink to &quot;Module Availability&quot;">‚Äã</a></h3><ul><li><strong>CircuitPython</strong>: Rich Adafruit library ecosystem</li><li><strong>MicroPython</strong>: More low-level hardware access</li><li><strong>Compatibility</strong>: Some modules may not be interchangeable</li></ul><h2 id="library-management" tabindex="-1">Library Management <a class="header-anchor" href="#library-management" aria-label="Permalink to &quot;Library Management&quot;">‚Äã</a></h2><h3 id="circuitpython-bundle" tabindex="-1">CircuitPython Bundle <a class="header-anchor" href="#circuitpython-bundle" aria-label="Permalink to &quot;CircuitPython Bundle&quot;">‚Äã</a></h3><p>CircuitPython uses a different library system:</p><ol><li>Download CircuitPython library bundle from Adafruit</li><li>Copy required libraries to <code>/lib</code> folder on device</li><li>Import libraries in your Python code</li></ol><h3 id="common-libraries" tabindex="-1">Common Libraries <a class="header-anchor" href="#common-libraries" aria-label="Permalink to &quot;Common Libraries&quot;">‚Äã</a></h3><ul><li><code>adafruit_motor</code>: Motor control</li><li><code>adafruit_sensors</code>: Various sensor drivers</li><li><code>adafruit_display</code>: Display drivers</li><li><code>neopixel</code>: RGB LED strips</li></ul><h2 id="validation-status" tabindex="-1">Validation Status <a class="header-anchor" href="#validation-status" aria-label="Permalink to &quot;Validation Status&quot;">‚Äã</a></h2><table tabindex="0"><thead><tr><th>Feature</th><th>Status</th><th>Notes</th></tr></thead><tbody><tr><td><strong>Basic Communication</strong></td><td>‚úÖ Working</td><td>Raw REPL compatible</td></tr><tr><td><strong>File Transfer</strong></td><td>‚úÖ Working</td><td>Standard file operations</td></tr><tr><td><strong>Attribute System</strong></td><td>‚úÖ Working</td><td>Task, Setup, Thread, Teardown</td></tr><tr><td><strong>Error Handling</strong></td><td>‚úÖ Working</td><td>Exception mapping functional</td></tr><tr><td><strong>Library Compatibility</strong></td><td>üîÑ Testing</td><td>Some MicroPython libraries incompatible</td></tr><tr><td><strong>Performance</strong></td><td>üîÑ Testing</td><td>Evaluating vs MicroPython</td></tr></tbody></table><h2 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">‚Äã</a></h2><ul><li><a href="/hardware/compatibility.html">Hardware Compatibility</a> - Full compatibility matrix</li><li><a href="/guide/getting-started.html">Getting Started</a> - Basic setup guide</li><li><a href="/guide/attributes.html">Attribute Programming</a> - Using attributes with CircuitPython</li><li><a href="/hardware/raspberry-pi-pico.html">Raspberry Pi Pico</a> - Pico with CircuitPython</li></ul><p><strong>Need immediate help?</strong> Check <a href="https://docs.circuitpython.org/" target="_blank" rel="noreferrer">CircuitPython documentation</a> or our <a href="https://github.com/belay-dotnet/Belay.NET/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a> for CircuitPython-specific questions.</p>`,38)]))}const g=i(l,[["render",e]]);export{c as __pageData,g as default};
