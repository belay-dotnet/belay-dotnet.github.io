import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.CUqMdM43.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"Belay.NET","text":"Connect C# Applications to Hardware Instantly","tagline":"A .NET library that lets your desktop applications communicate with MicroPython devices as easily as calling a method. No embedded programming knowledge required.","image":{"light":"/logo.svg","dark":"/logo-dark.svg","alt":"Belay.NET"},"actions":[{"theme":"brand","text":"Get Started","link":"/guide/getting-started"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/belay-dotnet/Belay.NET"}]}},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),t={name:"index.md"};function l(r,s,h,o,p,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="what-is-belay-net" tabindex="-1">What Is Belay.NET? <a class="header-anchor" href="#what-is-belay-net" aria-label="Permalink to &quot;What Is Belay.NET?&quot;">‚Äã</a></h2><p><strong>Belay.NET is a .NET library that bridges the gap between your C# desktop applications and MicroPython hardware.</strong> Think of it as a communication layer that lets you treat microcontrollers like remote objects in your application.</p><p>Instead of learning embedded programming, writing firmware, or dealing with serial communication protocols, you simply:</p><ul><li>Install the NuGet package</li><li>Connect your MicroPython device via USB</li><li>Write C# methods that execute Python code on the device</li><li>Get strongly-typed results back in your application</li></ul><p>It&#39;s designed for <strong>C# developers who need to connect to hardware quickly</strong> without becoming embedded systems experts.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">‚Äã</a></h2><ul><li>üöÄ <strong>Zero Configuration</strong>: Connect and control devices in seconds with automatic device detection and protocol negotiation.</li><li>üéØ <strong>Type-Safe Remote Execution</strong>: Full IntelliSense and compile-time safety for remote code with strongly-typed return values.</li><li>‚ö° <strong>Async First</strong>: Modern async/await patterns throughout the API with proper cancellation token support.</li><li>üè∑Ô∏è <strong>Attribute-Based Programming</strong>: Decorate methods to run seamlessly on devices with [Task], [Setup], [Teardown], and [Thread] attributes.</li><li>üì¶ <strong>Dependency Injection Ready</strong>: First-class DI support with Microsoft.Extensions including configuration, health checks, and factory patterns.</li><li>üîç <strong>Built-in Monitoring</strong>: Health checks, performance metrics, and comprehensive error handling with structured logging.</li></ul><h2 id="the-problem-we-solve" tabindex="-1">The Problem We Solve <a class="header-anchor" href="#the-problem-we-solve" aria-label="Permalink to &quot;The Problem We Solve&quot;">‚Äã</a></h2><p><strong>Connecting C# desktop applications to hardware is unnecessarily complex.</strong> Traditional approaches require:</p><p>‚ùå Learning embedded programming languages<br> ‚ùå Writing and deploying firmware<br> ‚ùå Managing serial communication protocols<br> ‚ùå Handling device state and error conditions<br> ‚ùå Converting between data formats manually</p><p><strong>Belay.NET eliminates this complexity:</strong></p><p>‚úÖ <strong>No firmware needed</strong> - Works with standard MicroPython<br> ‚úÖ <strong>No serial protocols</strong> - Handled automatically<br> ‚úÖ <strong>No embedded knowledge</strong> - Write familiar C# code<br> ‚úÖ <strong>Type safety</strong> - Get compile-time checking and IntelliSense<br> ‚úÖ <strong>Error handling</strong> - Comprehensive exception management</p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">‚Äã</a></h2><div class="how-it-works"><div class="step"><div class="step-number">1</div><h4>Connect Your Device</h4><p>Simply plug in your MicroPython device via USB. Belay.NET handles the communication protocol automatically.</p></div><div class="step"><div class="step-number">2</div><h4>Write C# Code</h4><p>Create C# classes that represent your hardware. Use attributes to mark methods that should run on the device.</p></div><div class="step"><div class="step-number">3</div><h4>Execute Remotely</h4><p>Call your C# methods normally. Belay.NET translates and executes them on the microcontroller, returning typed results.</p></div></div><h2 id="see-it-in-action" tabindex="-1">See It In Action <a class="header-anchor" href="#see-it-in-action" aria-label="Permalink to &quot;See It In Action&quot;">‚Äã</a></h2><p>Transform complex hardware control into simple C# method calls:</p><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Install: dotnet add package Belay.NET</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmartSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Device</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitializeAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;from machine import Pin, ADC; sensor = ADC(Pin(26))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeoutMs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadTemperatureAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sensor.read_u16() * 3.3 / 65536 * 100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetLedAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;led.{&#39;on&#39; </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;off&#39;}(); True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use like any other .NET class‚Äîno hardware knowledge required</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmartSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sensor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConnectAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COM3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sensor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitializeAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sensor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadTemperatureAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Current temperature: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">temperature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}¬∞C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="production-ready-features" tabindex="-1">Production-Ready Features <a class="header-anchor" href="#production-ready-features" aria-label="Permalink to &quot;Production-Ready Features&quot;">‚Äã</a></h2><h3 id="for-individual-developers" tabindex="-1">For Individual Developers <a class="header-anchor" href="#for-individual-developers" aria-label="Permalink to &quot;For Individual Developers&quot;">‚Äã</a></h3><ul><li><strong>Zero Configuration</strong>: Works out of the box with popular development boards</li><li><strong>Rich IDE Support</strong>: Full IntelliSense, debugging, and error checking</li><li><strong>Type Safety</strong>: Strongly-typed remote execution with compile-time validation</li><li><strong>Async/Await</strong>: Modern async patterns for responsive applications</li></ul><h3 id="for-enterprise-teams" tabindex="-1">For Enterprise Teams <a class="header-anchor" href="#for-enterprise-teams" aria-label="Permalink to &quot;For Enterprise Teams&quot;">‚Äã</a></h3><ul><li><strong>Dependency Injection</strong>: Full Microsoft.Extensions.DependencyInjection integration</li><li><strong>Health Monitoring</strong>: Built-in health checks and performance metrics</li><li><strong>Configuration Management</strong>: Structured configuration with validation</li><li><strong>Error Handling</strong>: Comprehensive exception hierarchy with device error mapping</li><li><strong>Session Management</strong>: Advanced connection pooling and lifecycle management</li><li><strong>Structured Logging</strong>: Integration with Microsoft.Extensions.Logging</li></ul><h2 id="use-cases-we-enable" tabindex="-1">Use Cases We Enable <a class="header-anchor" href="#use-cases-we-enable" aria-label="Permalink to &quot;Use Cases We Enable&quot;">‚Äã</a></h2><div class="use-cases"><div class="use-case"><h4>üè≠ Industrial Automation</h4><p>Control PLCs, sensors, and actuators from .NET applications. Build SCADA systems with familiar tools and deployment patterns.</p></div><div class="use-case"><h4>üè† Smart Home Systems</h4><p>Create intelligent home automation with ASP.NET Core backends that directly control IoT devices. Build dashboards with Blazor or React.</p></div><div class="use-case"><h4>üìä Data Collection</h4><p>Build research instruments and monitoring systems. Store data directly to SQL Server, Entity Framework, or cloud databases.</p></div><div class="use-case"><h4>üéì Educational Projects</h4><p>Teach IoT concepts without the complexity of embedded programming. Students learn hardware control using familiar C# syntax.</p></div></div><h3 id="supported-hardware" tabindex="-1">Supported Hardware <a class="header-anchor" href="#supported-hardware" aria-label="Permalink to &quot;Supported Hardware&quot;">‚Äã</a></h3><div class="hardware-grid"><div class="hardware-card"><h4>üîå Raspberry Pi Pico</h4><p>Full MicroPython and CircuitPython support</p><span class="status supported">Fully Supported</span></div><div class="hardware-card"><h4>üì° ESP32</h4><p>WiFi-enabled microcontroller with rich peripherals</p><span class="status supported">Fully Supported</span></div><div class="hardware-card"><h4>‚ö° PyBoard</h4><p>Original MicroPython development board</p><span class="status supported">Fully Supported</span></div><div class="hardware-card"><h4>üêç CircuitPython</h4><p>Adafruit&#39;s education-focused Python variant</p><span class="status beta">Beta Support</span></div></div><p><a href="/hardware/compatibility.html">View full compatibility matrix ‚Üí</a></p><h2 id="what-s-new-in-v0-2-0" tabindex="-1">What&#39;s New in v0.2.0 <a class="header-anchor" href="#what-s-new-in-v0-2-0" aria-label="Permalink to &quot;What&#39;s New in v0.2.0&quot;">‚Äã</a></h2><ul><li>‚ú® <strong>Dependency Injection</strong>: First-class Microsoft.Extensions.DependencyInjection support</li><li>üè• <strong>Health Checks</strong>: Built-in system and device health monitoring</li><li>‚öôÔ∏è <strong>Configuration</strong>: Comprehensive configuration management with validation</li><li>üè≠ <strong>Factory Patterns</strong>: Clean abstractions for device and communicator creation</li><li>üîß <strong>Session Management</strong>: Advanced session lifecycle and resource management</li><li>‚ùå <strong>Exception Handling</strong>: Unified exception hierarchy with device error mapping</li></ul><p><a href="/changelog.html">Read the full changelog ‚Üí</a></p>`,30)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
